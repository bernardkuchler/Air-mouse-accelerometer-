
STM32_F407G_MISKA_pospesevalniki.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000842c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008610  08008610  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008618  08008618  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800861c  0800861c  0001861c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08008620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020124  2**0
                  CONTENTS
 10 .bss          00000b2c  20000124  20000124  00020124  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c50  20000c50  00020124  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159e7  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000391f  00000000  00000000  00035b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  00039460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001030  00000000  00000000  0003a630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002494e  00000000  00000000  0003b660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ad5e  00000000  00000000  0005ffae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca58b  00000000  00000000  0007ad0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145297  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048b0  00000000  00000000  001452e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000124 	.word	0x20000124
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800859c 	.word	0x0800859c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000128 	.word	0x20000128
 80001c4:	0800859c 	.word	0x0800859c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	4b77      	ldr	r3, [pc, #476]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a76      	ldr	r2, [pc, #472]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b74      	ldr	r3, [pc, #464]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	4b70      	ldr	r3, [pc, #448]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a6f      	ldr	r2, [pc, #444]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b6d      	ldr	r3, [pc, #436]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b69      	ldr	r3, [pc, #420]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a68      	ldr	r2, [pc, #416]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b66      	ldr	r3, [pc, #408]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b62      	ldr	r3, [pc, #392]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a61      	ldr	r2, [pc, #388]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b5f      	ldr	r3, [pc, #380]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b5b      	ldr	r3, [pc, #364]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a5a      	ldr	r2, [pc, #360]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b58      	ldr	r3, [pc, #352]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b54      	ldr	r3, [pc, #336]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a53      	ldr	r2, [pc, #332]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b51      	ldr	r3, [pc, #324]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	484e      	ldr	r0, [pc, #312]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 8000590:	f001 f8de 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f242 0101 	movw	r1, #8193	; 0x2001
 800059a:	484c      	ldr	r0, [pc, #304]	; (80006cc <MX_GPIO_Init+0x200>)
 800059c:	f001 f8d8 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005a0:	2200      	movs	r2, #0
 80005a2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005a6:	484a      	ldr	r0, [pc, #296]	; (80006d0 <MX_GPIO_Init+0x204>)
 80005a8:	f001 f8d2 	bl	8001750 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ac:	2308      	movs	r3, #8
 80005ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	4619      	mov	r1, r3
 80005c2:	4841      	ldr	r0, [pc, #260]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 80005c4:	f000 ff10 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin;
 80005c8:	f242 0301 	movw	r3, #8193	; 0x2001
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	4619      	mov	r1, r3
 80005e0:	483a      	ldr	r0, [pc, #232]	; (80006cc <MX_GPIO_Init+0x200>)
 80005e2:	f000 ff01 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e6:	2308      	movs	r3, #8
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	2302      	movs	r3, #2
 80005ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f6:	2305      	movs	r3, #5
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	4832      	ldr	r0, [pc, #200]	; (80006cc <MX_GPIO_Init+0x200>)
 8000602:	f000 fef1 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000606:	2301      	movs	r3, #1
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000610:	2302      	movs	r3, #2
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	482e      	ldr	r0, [pc, #184]	; (80006d4 <MX_GPIO_Init+0x208>)
 800061c:	f000 fee4 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000620:	2304      	movs	r3, #4
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000624:	2300      	movs	r3, #0
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4619      	mov	r1, r3
 8000632:	4829      	ldr	r0, [pc, #164]	; (80006d8 <MX_GPIO_Init+0x20c>)
 8000634:	f000 fed8 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800064a:	2305      	movs	r3, #5
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	4619      	mov	r1, r3
 8000654:	4820      	ldr	r0, [pc, #128]	; (80006d8 <MX_GPIO_Init+0x20c>)
 8000656:	f000 fec7 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800065a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800065e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	4817      	ldr	r0, [pc, #92]	; (80006d0 <MX_GPIO_Init+0x204>)
 8000674:	f000 feb8 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000678:	2320      	movs	r3, #32
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4811      	ldr	r0, [pc, #68]	; (80006d0 <MX_GPIO_Init+0x204>)
 800068c:	f000 feac 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000694:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	4808      	ldr	r0, [pc, #32]	; (80006c8 <MX_GPIO_Init+0x1fc>)
 80006a6:	f000 fe9f 	bl	80013e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2006      	movs	r0, #6
 80006b0:	f000 fe63 	bl	800137a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006b4:	2006      	movs	r0, #6
 80006b6:	f000 fe7c 	bl	80013b2 <HAL_NVIC_EnableIRQ>

}
 80006ba:	bf00      	nop
 80006bc:	3730      	adds	r7, #48	; 0x30
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40020800 	.word	0x40020800
 80006d0:	40020c00 	.word	0x40020c00
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020400 	.word	0x40020400

080006dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C1_Init+0x50>)
 800071a:	f001 f84b 	bl	80017b4 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 fb94 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000140 	.word	0x20000140
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a19      	ldr	r2, [pc, #100]	; (80007bc <HAL_I2C_MspInit+0x84>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d12c      	bne.n	80007b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <HAL_I2C_MspInit+0x88>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <HAL_I2C_MspInit+0x88>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_I2C_MspInit+0x88>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000776:	f44f 7310 	mov.w	r3, #576	; 0x240
 800077a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077c:	2312      	movs	r3, #18
 800077e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000780:	2301      	movs	r3, #1
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000788:	2304      	movs	r3, #4
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <HAL_I2C_MspInit+0x8c>)
 8000794:	f000 fe28 	bl	80013e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_I2C_MspInit+0x88>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <HAL_I2C_MspInit+0x88>)
 80007a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_I2C_MspInit+0x88>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	; 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40005400 	.word	0x40005400
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020400 	.word	0x40020400

080007c8 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_I2S3_Init+0x54>)
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <MX_I2S3_Init+0x58>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2S3_Init+0x54>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_I2S3_Init+0x54>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_I2S3_Init+0x54>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_I2S3_Init+0x54>)
 80007e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_I2S3_Init+0x54>)
 80007f0:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <MX_I2S3_Init+0x5c>)
 80007f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_I2S3_Init+0x54>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_I2S3_Init+0x54>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_I2S3_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_I2S3_Init+0x54>)
 8000808:	f001 f918 	bl	8001a3c <HAL_I2S_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000812:	f000 fb1d 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000194 	.word	0x20000194
 8000820:	40003c00 	.word	0x40003c00
 8000824:	00017700 	.word	0x00017700

08000828 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	; 0x38
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a31      	ldr	r2, [pc, #196]	; (8000918 <HAL_I2S_MspInit+0xf0>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d15a      	bne.n	800090e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000858:	2301      	movs	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800085c:	23c0      	movs	r3, #192	; 0xc0
 800085e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000860:	2302      	movs	r3, #2
 8000862:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4618      	mov	r0, r3
 800086a:	f003 fc71 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000874:	f000 faec 	bl	8000e50 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <HAL_I2S_MspInit+0xf4>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a26      	ldr	r2, [pc, #152]	; (800091c <HAL_I2S_MspInit+0xf4>)
 8000882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <HAL_I2S_MspInit+0xf4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4b20      	ldr	r3, [pc, #128]	; (800091c <HAL_I2S_MspInit+0xf4>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a1f      	ldr	r2, [pc, #124]	; (800091c <HAL_I2S_MspInit+0xf4>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <HAL_I2S_MspInit+0xf4>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_I2S_MspInit+0xf4>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a18      	ldr	r2, [pc, #96]	; (800091c <HAL_I2S_MspInit+0xf4>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	6313      	str	r3, [r2, #48]	; 0x30
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <HAL_I2S_MspInit+0xf4>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008cc:	2310      	movs	r3, #16
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008dc:	2306      	movs	r3, #6
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <HAL_I2S_MspInit+0xf8>)
 80008e8:	f000 fd7e 	bl	80013e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008ec:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fe:	2306      	movs	r3, #6
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <HAL_I2S_MspInit+0xfc>)
 800090a:	f000 fd6d 	bl	80013e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800090e:	bf00      	nop
 8000910:	3738      	adds	r7, #56	; 0x38
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40003c00 	.word	0x40003c00
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000
 8000924:	40020800 	.word	0x40020800

08000928 <Adxl_Calibrate>:
	Adxl_Write (0x2d, 0x08);  // power_cntl measure and wake up 8hz

}*/

void Adxl_Calibrate (void) //Kalibrira vrednosti k jih dobi iz adxl -> POSPESKI NA NASI PLOSCI
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af02      	add	r7, sp, #8
	for (int i=0; i<50; i++)
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	e076      	b.n	8000a22 <Adxl_Calibrate+0xfa>
		max_xval = MAX(max_xval, x);
		min_yval = MIN(min_yval, y);
		max_yval = MAX(max_yval, y);
		HAL_Delay (100);
		*/
		outdata[0] = 0x29 | 0x80 ; // read x
 8000934:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <Adxl_Calibrate+0x114>)
 8000936:	22a9      	movs	r2, #169	; 0xa9
 8000938:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2108      	movs	r1, #8
 800093e:	4840      	ldr	r0, [pc, #256]	; (8000a40 <Adxl_Calibrate+0x118>)
 8000940:	f000 ff06 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2302      	movs	r3, #2
 800094c:	4a3d      	ldr	r2, [pc, #244]	; (8000a44 <Adxl_Calibrate+0x11c>)
 800094e:	493b      	ldr	r1, [pc, #236]	; (8000a3c <Adxl_Calibrate+0x114>)
 8000950:	483d      	ldr	r0, [pc, #244]	; (8000a48 <Adxl_Calibrate+0x120>)
 8000952:	f003 fdc6 	bl	80044e2 <HAL_SPI_TransmitReceive>
		// HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
		AccelX = indata[1];
 8000956:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <Adxl_Calibrate+0x11c>)
 8000958:	785b      	ldrb	r3, [r3, #1]
 800095a:	b25a      	sxtb	r2, r3
 800095c:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <Adxl_Calibrate+0x124>)
 800095e:	701a      	strb	r2, [r3, #0]
		outdata[0] = 0x2B | 0x80 ; // read y
 8000960:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <Adxl_Calibrate+0x114>)
 8000962:	22ab      	movs	r2, #171	; 0xab
 8000964:	701a      	strb	r2, [r3, #0]
		// HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
		HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2302      	movs	r3, #2
 800096e:	4a35      	ldr	r2, [pc, #212]	; (8000a44 <Adxl_Calibrate+0x11c>)
 8000970:	4932      	ldr	r1, [pc, #200]	; (8000a3c <Adxl_Calibrate+0x114>)
 8000972:	4835      	ldr	r0, [pc, #212]	; (8000a48 <Adxl_Calibrate+0x120>)
 8000974:	f003 fdb5 	bl	80044e2 <HAL_SPI_TransmitReceive>
		// HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
		AccelY = indata[1];
 8000978:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <Adxl_Calibrate+0x11c>)
 800097a:	785b      	ldrb	r3, [r3, #1]
 800097c:	b25a      	sxtb	r2, r3
 800097e:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <Adxl_Calibrate+0x128>)
 8000980:	701a      	strb	r2, [r3, #0]
		outdata[0] = 0x2D | 0x80 ; // read z
 8000982:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <Adxl_Calibrate+0x114>)
 8000984:	22ad      	movs	r2, #173	; 0xad
 8000986:	701a      	strb	r2, [r3, #0]
		// HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
		HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	2302      	movs	r3, #2
 8000990:	4a2c      	ldr	r2, [pc, #176]	; (8000a44 <Adxl_Calibrate+0x11c>)
 8000992:	492a      	ldr	r1, [pc, #168]	; (8000a3c <Adxl_Calibrate+0x114>)
 8000994:	482c      	ldr	r0, [pc, #176]	; (8000a48 <Adxl_Calibrate+0x120>)
 8000996:	f003 fda4 	bl	80044e2 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2108      	movs	r1, #8
 800099e:	4828      	ldr	r0, [pc, #160]	; (8000a40 <Adxl_Calibrate+0x118>)
 80009a0:	f000 fed6 	bl	8001750 <HAL_GPIO_WritePin>
		AccelZ = indata[1];
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <Adxl_Calibrate+0x11c>)
 80009a6:	785b      	ldrb	r3, [r3, #1]
 80009a8:	b25a      	sxtb	r2, r3
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <Adxl_Calibrate+0x12c>)
 80009ac:	701a      	strb	r2, [r3, #0]

		min_xval = MIN(min_xval, AccelX);
 80009ae:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <Adxl_Calibrate+0x124>)
 80009b0:	f993 3000 	ldrsb.w	r3, [r3]
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <Adxl_Calibrate+0x130>)
 80009b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009bc:	4293      	cmp	r3, r2
 80009be:	bfa8      	it	ge
 80009c0:	4613      	movge	r3, r2
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <Adxl_Calibrate+0x130>)
 80009c6:	801a      	strh	r2, [r3, #0]
		max_xval = MAX(max_xval, AccelX);
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <Adxl_Calibrate+0x124>)
 80009ca:	f993 3000 	ldrsb.w	r3, [r3]
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <Adxl_Calibrate+0x134>)
 80009d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d6:	4293      	cmp	r3, r2
 80009d8:	bfb8      	it	lt
 80009da:	4613      	movlt	r3, r2
 80009dc:	b21a      	sxth	r2, r3
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <Adxl_Calibrate+0x134>)
 80009e0:	801a      	strh	r2, [r3, #0]
		min_yval = MIN(min_yval, AccelY);
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <Adxl_Calibrate+0x128>)
 80009e4:	f993 3000 	ldrsb.w	r3, [r3]
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <Adxl_Calibrate+0x138>)
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	4293      	cmp	r3, r2
 80009f2:	bfa8      	it	ge
 80009f4:	4613      	movge	r3, r2
 80009f6:	b21a      	sxth	r2, r3
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <Adxl_Calibrate+0x138>)
 80009fa:	801a      	strh	r2, [r3, #0]
		max_yval = MAX(max_yval, AccelY);
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <Adxl_Calibrate+0x128>)
 80009fe:	f993 3000 	ldrsb.w	r3, [r3]
 8000a02:	b21a      	sxth	r2, r3
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <Adxl_Calibrate+0x13c>)
 8000a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	bfb8      	it	lt
 8000a0e:	4613      	movlt	r3, r2
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <Adxl_Calibrate+0x13c>)
 8000a14:	801a      	strh	r2, [r3, #0]
		HAL_Delay (100);
 8000a16:	2064      	movs	r0, #100	; 0x64
 8000a18:	f000 fbb0 	bl	800117c <HAL_Delay>
	for (int i=0; i<50; i++)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b31      	cmp	r3, #49	; 0x31
 8000a26:	dd85      	ble.n	8000934 <Adxl_Calibrate+0xc>
	}

	/* Turn On the LED to show the completion of calibration */
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a2e:	480e      	ldr	r0, [pc, #56]	; (8000a68 <Adxl_Calibrate+0x140>)
 8000a30:	f000 fe8e 	bl	8001750 <HAL_GPIO_WritePin>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001e4 	.word	0x200001e4
 8000a40:	40021000 	.word	0x40021000
 8000a44:	200001e0 	.word	0x200001e0
 8000a48:	200001f4 	.word	0x200001f4
 8000a4c:	200001e7 	.word	0x200001e7
 8000a50:	200001e8 	.word	0x200001e8
 8000a54:	200001e9 	.word	0x200001e9
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000002 	.word	0x20000002
 8000a60:	20000004 	.word	0x20000004
 8000a64:	20000006 	.word	0x20000006
 8000a68:	40020c00 	.word	0x40020c00

08000a6c <HAL_GPIO_EXTI_Callback>:


// EXTI -> external interrupt!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) //Pogledas ce se je interupt sprozu zard tipke GPIOA, GPIO_PIN_0
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d102      	bne.n	8000a82 <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x24>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
	}
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200001ee 	.word	0x200001ee

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9a:	f000 fafd 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9e:	f000 f96d 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa2:	f7ff fd13 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000aa6:	f7ff fe19 	bl	80006dc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000aaa:	f7ff fe8d 	bl	80007c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000aae:	f000 f9d5 	bl	8000e5c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000ab2:	f007 f901 	bl	8007cb8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  // Config accelerometer
  // Read WHOAMI register
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2108      	movs	r1, #8
 8000aba:	489c      	ldr	r0, [pc, #624]	; (8000d2c <main+0x298>)
 8000abc:	f000 fe48 	bl	8001750 <HAL_GPIO_WritePin>
  outdata[0] = 0x0f | 0x80 ; // read whoami
 8000ac0:	4b9b      	ldr	r3, [pc, #620]	; (8000d30 <main+0x29c>)
 8000ac2:	228f      	movs	r2, #143	; 0x8f
 8000ac4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2302      	movs	r3, #2
 8000ace:	4a99      	ldr	r2, [pc, #612]	; (8000d34 <main+0x2a0>)
 8000ad0:	4997      	ldr	r1, [pc, #604]	; (8000d30 <main+0x29c>)
 8000ad2:	4899      	ldr	r0, [pc, #612]	; (8000d38 <main+0x2a4>)
 8000ad4:	f003 fd05 	bl	80044e2 <HAL_SPI_TransmitReceive>
  lis_id = indata[1];
 8000ad8:	4b96      	ldr	r3, [pc, #600]	; (8000d34 <main+0x2a0>)
 8000ada:	785a      	ldrb	r2, [r3, #1]
 8000adc:	4b97      	ldr	r3, [pc, #604]	; (8000d3c <main+0x2a8>)
 8000ade:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	4891      	ldr	r0, [pc, #580]	; (8000d2c <main+0x298>)
 8000ae6:	f000 fe33 	bl	8001750 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000aea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aee:	f000 fb45 	bl	800117c <HAL_Delay>
  // Read WHOAMI register
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2108      	movs	r1, #8
 8000af6:	488d      	ldr	r0, [pc, #564]	; (8000d2c <main+0x298>)
 8000af8:	f000 fe2a 	bl	8001750 <HAL_GPIO_WritePin>
  outdata[0] = 0x20 ; // switch on axes
 8000afc:	4b8c      	ldr	r3, [pc, #560]	; (8000d30 <main+0x29c>)
 8000afe:	2220      	movs	r2, #32
 8000b00:	701a      	strb	r2, [r3, #0]
  outdata[1] = 0x47 ;
 8000b02:	4b8b      	ldr	r3, [pc, #556]	; (8000d30 <main+0x29c>)
 8000b04:	2247      	movs	r2, #71	; 0x47
 8000b06:	705a      	strb	r2, [r3, #1]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2302      	movs	r3, #2
 8000b10:	4a88      	ldr	r2, [pc, #544]	; (8000d34 <main+0x2a0>)
 8000b12:	4987      	ldr	r1, [pc, #540]	; (8000d30 <main+0x29c>)
 8000b14:	4888      	ldr	r0, [pc, #544]	; (8000d38 <main+0x2a4>)
 8000b16:	f003 fce4 	bl	80044e2 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2108      	movs	r1, #8
 8000b1e:	4883      	ldr	r0, [pc, #524]	; (8000d2c <main+0x298>)
 8000b20:	f000 fe16 	bl	8001750 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b28:	f000 fb28 	bl	800117c <HAL_Delay>
  outdata[1] = 0x00 ;
 8000b2c:	4b80      	ldr	r3, [pc, #512]	; (8000d30 <main+0x29c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	705a      	strb	r2, [r3, #1]
  // From Device with address=0x94, Read register with address 0x01 and put value in ChipID
  // DevAddress_0x94, tMemAddress=0x01, MemAddSize=8b, *pData,Size, Timeout);
  retval = HAL_I2C_Mem_Read(&hi2c1, 0x94, 0x01, I2C_MEMADD_SIZE_8BIT, &ChipID, 1, 1000);*/


  Adxl_Calibrate(); //KLICEM KALIBRACIJO -> DOKLER SE NE PRZGE LED!
 8000b32:	f7ff fef9 	bl	8000928 <Adxl_Calibrate>
  while (1)
  {



	  outdata[0] = 0x29 | 0x80 ; // read x
 8000b36:	4b7e      	ldr	r3, [pc, #504]	; (8000d30 <main+0x29c>)
 8000b38:	22a9      	movs	r2, #169	; 0xa9
 8000b3a:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2108      	movs	r1, #8
 8000b40:	487a      	ldr	r0, [pc, #488]	; (8000d2c <main+0x298>)
 8000b42:	f000 fe05 	bl	8001750 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	4a79      	ldr	r2, [pc, #484]	; (8000d34 <main+0x2a0>)
 8000b50:	4977      	ldr	r1, [pc, #476]	; (8000d30 <main+0x29c>)
 8000b52:	4879      	ldr	r0, [pc, #484]	; (8000d38 <main+0x2a4>)
 8000b54:	f003 fcc5 	bl	80044e2 <HAL_SPI_TransmitReceive>
	  // HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
	  AccelX = indata[1];
 8000b58:	4b76      	ldr	r3, [pc, #472]	; (8000d34 <main+0x2a0>)
 8000b5a:	785b      	ldrb	r3, [r3, #1]
 8000b5c:	b25a      	sxtb	r2, r3
 8000b5e:	4b78      	ldr	r3, [pc, #480]	; (8000d40 <main+0x2ac>)
 8000b60:	701a      	strb	r2, [r3, #0]
	  outdata[0] = 0x2B | 0x80 ; // read y
 8000b62:	4b73      	ldr	r3, [pc, #460]	; (8000d30 <main+0x29c>)
 8000b64:	22ab      	movs	r2, #171	; 0xab
 8000b66:	701a      	strb	r2, [r3, #0]
	  // HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
	  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2302      	movs	r3, #2
 8000b70:	4a70      	ldr	r2, [pc, #448]	; (8000d34 <main+0x2a0>)
 8000b72:	496f      	ldr	r1, [pc, #444]	; (8000d30 <main+0x29c>)
 8000b74:	4870      	ldr	r0, [pc, #448]	; (8000d38 <main+0x2a4>)
 8000b76:	f003 fcb4 	bl	80044e2 <HAL_SPI_TransmitReceive>
	  // HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
	  AccelY = indata[1];
 8000b7a:	4b6e      	ldr	r3, [pc, #440]	; (8000d34 <main+0x2a0>)
 8000b7c:	785b      	ldrb	r3, [r3, #1]
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	4b70      	ldr	r3, [pc, #448]	; (8000d44 <main+0x2b0>)
 8000b82:	701a      	strb	r2, [r3, #0]
	  outdata[0] = 0x2D | 0x80 ; // read z
 8000b84:	4b6a      	ldr	r3, [pc, #424]	; (8000d30 <main+0x29c>)
 8000b86:	22ad      	movs	r2, #173	; 0xad
 8000b88:	701a      	strb	r2, [r3, #0]
	  // HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
	  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2302      	movs	r3, #2
 8000b92:	4a68      	ldr	r2, [pc, #416]	; (8000d34 <main+0x2a0>)
 8000b94:	4966      	ldr	r1, [pc, #408]	; (8000d30 <main+0x29c>)
 8000b96:	4868      	ldr	r0, [pc, #416]	; (8000d38 <main+0x2a4>)
 8000b98:	f003 fca3 	bl	80044e2 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	4862      	ldr	r0, [pc, #392]	; (8000d2c <main+0x298>)
 8000ba2:	f000 fdd5 	bl	8001750 <HAL_GPIO_WritePin>
	  AccelZ = indata[1];
 8000ba6:	4b63      	ldr	r3, [pc, #396]	; (8000d34 <main+0x2a0>)
 8000ba8:	785b      	ldrb	r3, [r3, #1]
 8000baa:	b25a      	sxtb	r2, r3
 8000bac:	4b66      	ldr	r3, [pc, #408]	; (8000d48 <main+0x2b4>)
 8000bae:	701a      	strb	r2, [r3, #0]

	 /*HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);*/

	 KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4866      	ldr	r0, [pc, #408]	; (8000d4c <main+0x2b8>)
 8000bb4:	f000 fdb4 	bl	8001720 <HAL_GPIO_ReadPin>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b64      	ldr	r3, [pc, #400]	; (8000d50 <main+0x2bc>)
 8000bbe:	601a      	str	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
	  //HAL_Delay(1000);



	 if (AccelX < min_xval)
 8000bc0:	4b5f      	ldr	r3, [pc, #380]	; (8000d40 <main+0x2ac>)
 8000bc2:	f993 3000 	ldrsb.w	r3, [r3]
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	4b62      	ldr	r3, [pc, #392]	; (8000d54 <main+0x2c0>)
 8000bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	da0d      	bge.n	8000bee <main+0x15a>
	 {
	   newxval = AccelX - min_xval;
 8000bd2:	4b5b      	ldr	r3, [pc, #364]	; (8000d40 <main+0x2ac>)
 8000bd4:	f993 3000 	ldrsb.w	r3, [r3]
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b5e      	ldr	r3, [pc, #376]	; (8000d54 <main+0x2c0>)
 8000bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	4b5b      	ldr	r3, [pc, #364]	; (8000d58 <main+0x2c4>)
 8000bea:	801a      	strh	r2, [r3, #0]
 8000bec:	e015      	b.n	8000c1a <main+0x186>
	 }

	else if (AccelX > max_xval)
 8000bee:	4b54      	ldr	r3, [pc, #336]	; (8000d40 <main+0x2ac>)
 8000bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	4b59      	ldr	r3, [pc, #356]	; (8000d5c <main+0x2c8>)
 8000bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dd0c      	ble.n	8000c1a <main+0x186>
	 {
	   newxval = AccelX - max_xval;
 8000c00:	4b4f      	ldr	r3, [pc, #316]	; (8000d40 <main+0x2ac>)
 8000c02:	f993 3000 	ldrsb.w	r3, [r3]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b54      	ldr	r3, [pc, #336]	; (8000d5c <main+0x2c8>)
 8000c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	4b50      	ldr	r3, [pc, #320]	; (8000d58 <main+0x2c4>)
 8000c18:	801a      	strh	r2, [r3, #0]
	 }

	if (AccelY < min_yval)
 8000c1a:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <main+0x2b0>)
 8000c1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	4b4f      	ldr	r3, [pc, #316]	; (8000d60 <main+0x2cc>)
 8000c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	da0d      	bge.n	8000c48 <main+0x1b4>
	{
	  newyval = AccelY - min_yval;
 8000c2c:	4b45      	ldr	r3, [pc, #276]	; (8000d44 <main+0x2b0>)
 8000c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <main+0x2cc>)
 8000c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	b21a      	sxth	r2, r3
 8000c42:	4b48      	ldr	r3, [pc, #288]	; (8000d64 <main+0x2d0>)
 8000c44:	801a      	strh	r2, [r3, #0]
 8000c46:	e015      	b.n	8000c74 <main+0x1e0>
	}

	else if (AccelY > max_yval)
 8000c48:	4b3e      	ldr	r3, [pc, #248]	; (8000d44 <main+0x2b0>)
 8000c4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c4e:	b21a      	sxth	r2, r3
 8000c50:	4b45      	ldr	r3, [pc, #276]	; (8000d68 <main+0x2d4>)
 8000c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dd0c      	ble.n	8000c74 <main+0x1e0>
	{
	 newyval = AccelY - max_yval;
 8000c5a:	4b3a      	ldr	r3, [pc, #232]	; (8000d44 <main+0x2b0>)
 8000c5c:	f993 3000 	ldrsb.w	r3, [r3]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4b41      	ldr	r3, [pc, #260]	; (8000d68 <main+0x2d4>)
 8000c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	b21a      	sxth	r2, r3
 8000c70:	4b3c      	ldr	r3, [pc, #240]	; (8000d64 <main+0x2d0>)
 8000c72:	801a      	strh	r2, [r3, #0]
	}

	if ((newxval > 10) || (newxval <-10)) //20 Da ne uplivajo nanjga vse male spremembe senzorja (loh oboje 10)
 8000c74:	4b38      	ldr	r3, [pc, #224]	; (8000d58 <main+0x2c4>)
 8000c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c7a:	2b0a      	cmp	r3, #10
 8000c7c:	dc05      	bgt.n	8000c8a <main+0x1f6>
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <main+0x2c4>)
 8000c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c84:	f113 0f0a 	cmn.w	r3, #10
 8000c88:	da0d      	bge.n	8000ca6 <main+0x212>
	{
	 mousehid.mouse_y = (newxval/10); //Delis npr z 3 da manj hitr accelerata kurzor miske
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <main+0x2c4>)
 8000c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c90:	4a36      	ldr	r2, [pc, #216]	; (8000d6c <main+0x2d8>)
 8000c92:	fb82 1203 	smull	r1, r2, r2, r3
 8000c96:	1092      	asrs	r2, r2, #2
 8000c98:	17db      	asrs	r3, r3, #31
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	b25a      	sxtb	r2, r3
 8000ca0:	4b33      	ldr	r3, [pc, #204]	; (8000d70 <main+0x2dc>)
 8000ca2:	709a      	strb	r2, [r3, #2]
 8000ca4:	e002      	b.n	8000cac <main+0x218>
	}
	else mousehid.mouse_y = 0;
 8000ca6:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <main+0x2dc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	709a      	strb	r2, [r3, #2]

	if ((newyval > 10) || (newyval <-10))
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <main+0x2d0>)
 8000cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb2:	2b0a      	cmp	r3, #10
 8000cb4:	dc05      	bgt.n	8000cc2 <main+0x22e>
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <main+0x2d0>)
 8000cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cbc:	f113 0f0a 	cmn.w	r3, #10
 8000cc0:	da0d      	bge.n	8000cde <main+0x24a>
	{
	 mousehid.mouse_x= (newyval)/10;
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <main+0x2d0>)
 8000cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc8:	4a28      	ldr	r2, [pc, #160]	; (8000d6c <main+0x2d8>)
 8000cca:	fb82 1203 	smull	r1, r2, r2, r3
 8000cce:	1092      	asrs	r2, r2, #2
 8000cd0:	17db      	asrs	r3, r3, #31
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	b25a      	sxtb	r2, r3
 8000cd8:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <main+0x2dc>)
 8000cda:	705a      	strb	r2, [r3, #1]
 8000cdc:	e002      	b.n	8000ce4 <main+0x250>
	}
	else mousehid.mouse_x = 0;
 8000cde:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <main+0x2dc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	705a      	strb	r2, [r3, #1]

	if (button_flag==1)
 8000ce4:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <main+0x2e0>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d115      	bne.n	8000d18 <main+0x284>
	{
	 mousehid.button = 1; //lev click = 1; desn click = 2
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <main+0x2dc>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
	 USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid)); //Pritisk
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	491e      	ldr	r1, [pc, #120]	; (8000d70 <main+0x2dc>)
 8000cf6:	4820      	ldr	r0, [pc, #128]	; (8000d78 <main+0x2e4>)
 8000cf8:	f005 fc64 	bl	80065c4 <USBD_HID_SendReport>
	 HAL_Delay (50); //50 ms delay znotraj clicka
 8000cfc:	2032      	movs	r0, #50	; 0x32
 8000cfe:	f000 fa3d 	bl	800117c <HAL_Delay>
	 mousehid.button = 0;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <main+0x2dc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
	 USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid)); //Spust
 8000d08:	2204      	movs	r2, #4
 8000d0a:	4919      	ldr	r1, [pc, #100]	; (8000d70 <main+0x2dc>)
 8000d0c:	481a      	ldr	r0, [pc, #104]	; (8000d78 <main+0x2e4>)
 8000d0e:	f005 fc59 	bl	80065c4 <USBD_HID_SendReport>
	 button_flag =0;
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <main+0x2e0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
	}

	USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid)); //Ta funkcija poslje podatke na USB
 8000d18:	2204      	movs	r2, #4
 8000d1a:	4915      	ldr	r1, [pc, #84]	; (8000d70 <main+0x2dc>)
 8000d1c:	4816      	ldr	r0, [pc, #88]	; (8000d78 <main+0x2e4>)
 8000d1e:	f005 fc51 	bl	80065c4 <USBD_HID_SendReport>


	HAL_Delay(10);
 8000d22:	200a      	movs	r0, #10
 8000d24:	f000 fa2a 	bl	800117c <HAL_Delay>
	  outdata[0] = 0x29 | 0x80 ; // read x
 8000d28:	e705      	b.n	8000b36 <main+0xa2>
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	200001e4 	.word	0x200001e4
 8000d34:	200001e0 	.word	0x200001e0
 8000d38:	200001f4 	.word	0x200001f4
 8000d3c:	200001e6 	.word	0x200001e6
 8000d40:	200001e7 	.word	0x200001e7
 8000d44:	200001e8 	.word	0x200001e8
 8000d48:	200001e9 	.word	0x200001e9
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	200001dc 	.word	0x200001dc
 8000d54:	20000000 	.word	0x20000000
 8000d58:	200001ea 	.word	0x200001ea
 8000d5c:	20000002 	.word	0x20000002
 8000d60:	20000004 	.word	0x20000004
 8000d64:	200001ec 	.word	0x200001ec
 8000d68:	20000006 	.word	0x20000006
 8000d6c:	66666667 	.word	0x66666667
 8000d70:	200001f0 	.word	0x200001f0
 8000d74:	200001ee 	.word	0x200001ee
 8000d78:	20000254 	.word	0x20000254

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2230      	movs	r2, #48	; 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f007 fbfe 	bl	800858c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <SystemClock_Config+0xcc>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <SystemClock_Config+0xcc>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <SystemClock_Config+0xcc>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de2:	2302      	movs	r3, #2
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dec:	2308      	movs	r3, #8
 8000dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000df0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000df4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 fd20 	bl	8003848 <HAL_RCC_OscConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e0e:	f000 f81f 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2302      	movs	r3, #2
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2105      	movs	r1, #5
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 ff81 	bl	8003d38 <HAL_RCC_ClockConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e3c:	f000 f808 	bl	8000e50 <Error_Handler>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3750      	adds	r7, #80	; 0x50
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <MX_SPI1_Init+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e90:	2238      	movs	r2, #56	; 0x38
 8000e92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000ea8:	220a      	movs	r2, #10
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000eae:	f003 fa8f 	bl	80043d0 <HAL_SPI_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eb8:	f7ff ffca 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001f4 	.word	0x200001f4
 8000ec4:	40013000 	.word	0x40013000

08000ec8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_SPI_MspInit+0x84>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d12b      	bne.n	8000f42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000ef4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f22:	23e0      	movs	r3, #224	; 0xe0
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f32:	2305      	movs	r3, #5
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000f3e:	f000 fa53 	bl	80013e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40013000 	.word	0x40013000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f96:	2007      	movs	r0, #7
 8000f98:	f000 f9e4 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <NMI_Handler+0x4>

08000fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 f8a2 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001000:	2001      	movs	r0, #1
 8001002:	f000 fbbf 	bl	8001784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <OTG_FS_IRQHandler+0x10>)
 8001012:	f001 fb03 	bl	800261c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000730 	.word	0x20000730

08001020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800107c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104a:	490e      	ldr	r1, [pc, #56]	; (8001084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001060:	4c0b      	ldr	r4, [pc, #44]	; (8001090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800106e:	f7ff ffd7 	bl	8001020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001072:	f007 fa67 	bl	8008544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001076:	f7ff fd0d 	bl	8000a94 <main>
  bx  lr    
 800107a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800107c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001088:	08008620 	.word	0x08008620
  ldr r2, =_sbss
 800108c:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8001090:	20000c50 	.word	0x20000c50

08001094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <HAL_Init+0x40>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_Init+0x40>)
 80010ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_Init+0x40>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 f94f 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f808 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f7ff ff44 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023c00 	.word	0x40023c00

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f967 	bl	80013ce <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f92f 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000008 	.word	0x20000008
 8001134:	20000010 	.word	0x20000010
 8001138:	2000000c 	.word	0x2000000c

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000010 	.word	0x20000010
 8001160:	2000024c 	.word	0x2000024c

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000024c 	.word	0x2000024c

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff ffee 	bl	8001164 <HAL_GetTick>
 8001188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_Delay+0x44>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a2:	bf00      	nop
 80011a4:	f7ff ffde 	bl	8001164 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000010 	.word	0x20000010

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4907      	ldr	r1, [pc, #28]	; (8001260 <__NVIC_EnableIRQ+0x38>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f7ff ff8e 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff29 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff3e 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff8e 	bl	80012b8 <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5d 	bl	8001264 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff31 	bl	8001228 <__NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffa2 	bl	8001320 <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e16b      	b.n	80016dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	429a      	cmp	r2, r3
 800141e:	f040 815a 	bne.w	80016d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d005      	beq.n	800143a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001436:	2b02      	cmp	r3, #2
 8001438:	d130      	bne.n	800149c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	f003 0201 	and.w	r2, r3, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d017      	beq.n	80014d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d123      	bne.n	800152c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0203 	and.w	r2, r3, #3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80b4 	beq.w	80016d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b60      	ldr	r3, [pc, #384]	; (80016f4 <HAL_GPIO_Init+0x30c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a5f      	ldr	r2, [pc, #380]	; (80016f4 <HAL_GPIO_Init+0x30c>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <HAL_GPIO_Init+0x30c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800158a:	4a5b      	ldr	r2, [pc, #364]	; (80016f8 <HAL_GPIO_Init+0x310>)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a52      	ldr	r2, [pc, #328]	; (80016fc <HAL_GPIO_Init+0x314>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d02b      	beq.n	800160e <HAL_GPIO_Init+0x226>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a51      	ldr	r2, [pc, #324]	; (8001700 <HAL_GPIO_Init+0x318>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d025      	beq.n	800160a <HAL_GPIO_Init+0x222>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a50      	ldr	r2, [pc, #320]	; (8001704 <HAL_GPIO_Init+0x31c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01f      	beq.n	8001606 <HAL_GPIO_Init+0x21e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4f      	ldr	r2, [pc, #316]	; (8001708 <HAL_GPIO_Init+0x320>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d019      	beq.n	8001602 <HAL_GPIO_Init+0x21a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4e      	ldr	r2, [pc, #312]	; (800170c <HAL_GPIO_Init+0x324>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0x216>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4d      	ldr	r2, [pc, #308]	; (8001710 <HAL_GPIO_Init+0x328>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00d      	beq.n	80015fa <HAL_GPIO_Init+0x212>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4c      	ldr	r2, [pc, #304]	; (8001714 <HAL_GPIO_Init+0x32c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d007      	beq.n	80015f6 <HAL_GPIO_Init+0x20e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4b      	ldr	r2, [pc, #300]	; (8001718 <HAL_GPIO_Init+0x330>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d101      	bne.n	80015f2 <HAL_GPIO_Init+0x20a>
 80015ee:	2307      	movs	r3, #7
 80015f0:	e00e      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015f2:	2308      	movs	r3, #8
 80015f4:	e00c      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015f6:	2306      	movs	r3, #6
 80015f8:	e00a      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015fa:	2305      	movs	r3, #5
 80015fc:	e008      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015fe:	2304      	movs	r3, #4
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x228>
 8001602:	2303      	movs	r3, #3
 8001604:	e004      	b.n	8001610 <HAL_GPIO_Init+0x228>
 8001606:	2302      	movs	r3, #2
 8001608:	e002      	b.n	8001610 <HAL_GPIO_Init+0x228>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x228>
 800160e:	2300      	movs	r3, #0
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	f002 0203 	and.w	r2, r2, #3
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	4093      	lsls	r3, r2
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001620:	4935      	ldr	r1, [pc, #212]	; (80016f8 <HAL_GPIO_Init+0x310>)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	3302      	adds	r3, #2
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_GPIO_Init+0x334>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001652:	4a32      	ldr	r2, [pc, #200]	; (800171c <HAL_GPIO_Init+0x334>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001658:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_GPIO_Init+0x334>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800167c:	4a27      	ldr	r2, [pc, #156]	; (800171c <HAL_GPIO_Init+0x334>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_GPIO_Init+0x334>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a6:	4a1d      	ldr	r2, [pc, #116]	; (800171c <HAL_GPIO_Init+0x334>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_GPIO_Init+0x334>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <HAL_GPIO_Init+0x334>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3301      	adds	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	2b0f      	cmp	r3, #15
 80016e0:	f67f ae90 	bls.w	8001404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40013800 	.word	0x40013800
 80016fc:	40020000 	.word	0x40020000
 8001700:	40020400 	.word	0x40020400
 8001704:	40020800 	.word	0x40020800
 8001708:	40020c00 	.word	0x40020c00
 800170c:	40021000 	.word	0x40021000
 8001710:	40021400 	.word	0x40021400
 8001714:	40021800 	.word	0x40021800
 8001718:	40021c00 	.word	0x40021c00
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e001      	b.n	8001742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
 800175c:	4613      	mov	r3, r2
 800175e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001760:	787b      	ldrb	r3, [r7, #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800176c:	e003      	b.n	8001776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	041a      	lsls	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f962 	bl	8000a6c <HAL_GPIO_EXTI_Callback>
  }
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40013c00 	.word	0x40013c00

080017b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e12b      	b.n	8001a1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d106      	bne.n	80017e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe ffac 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2224      	movs	r2, #36	; 0x24
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0201 	bic.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001806:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001816:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001818:	f002 fc86 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 800181c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a81      	ldr	r2, [pc, #516]	; (8001a28 <HAL_I2C_Init+0x274>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d807      	bhi.n	8001838 <HAL_I2C_Init+0x84>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a80      	ldr	r2, [pc, #512]	; (8001a2c <HAL_I2C_Init+0x278>)
 800182c:	4293      	cmp	r3, r2
 800182e:	bf94      	ite	ls
 8001830:	2301      	movls	r3, #1
 8001832:	2300      	movhi	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	e006      	b.n	8001846 <HAL_I2C_Init+0x92>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a7d      	ldr	r2, [pc, #500]	; (8001a30 <HAL_I2C_Init+0x27c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	bf94      	ite	ls
 8001840:	2301      	movls	r3, #1
 8001842:	2300      	movhi	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0e7      	b.n	8001a1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4a78      	ldr	r2, [pc, #480]	; (8001a34 <HAL_I2C_Init+0x280>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0c9b      	lsrs	r3, r3, #18
 8001858:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a6a      	ldr	r2, [pc, #424]	; (8001a28 <HAL_I2C_Init+0x274>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d802      	bhi.n	8001888 <HAL_I2C_Init+0xd4>
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3301      	adds	r3, #1
 8001886:	e009      	b.n	800189c <HAL_I2C_Init+0xe8>
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	4a69      	ldr	r2, [pc, #420]	; (8001a38 <HAL_I2C_Init+0x284>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	3301      	adds	r3, #1
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	495c      	ldr	r1, [pc, #368]	; (8001a28 <HAL_I2C_Init+0x274>)
 80018b8:	428b      	cmp	r3, r1
 80018ba:	d819      	bhi.n	80018f0 <HAL_I2C_Init+0x13c>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1e59      	subs	r1, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ca:	1c59      	adds	r1, r3, #1
 80018cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018d0:	400b      	ands	r3, r1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <HAL_I2C_Init+0x138>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1e59      	subs	r1, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ea:	e051      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 80018ec:	2304      	movs	r3, #4
 80018ee:	e04f      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d111      	bne.n	800191c <HAL_I2C_Init+0x168>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1e58      	subs	r0, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	440b      	add	r3, r1
 8001906:	fbb0 f3f3 	udiv	r3, r0, r3
 800190a:	3301      	adds	r3, #1
 800190c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	e012      	b.n	8001942 <HAL_I2C_Init+0x18e>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e58      	subs	r0, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	0099      	lsls	r1, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001932:	3301      	adds	r3, #1
 8001934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_Init+0x196>
 8001946:	2301      	movs	r3, #1
 8001948:	e022      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10e      	bne.n	8001970 <HAL_I2C_Init+0x1bc>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1e58      	subs	r0, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	440b      	add	r3, r1
 8001960:	fbb0 f3f3 	udiv	r3, r0, r3
 8001964:	3301      	adds	r3, #1
 8001966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196e:	e00f      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1e58      	subs	r0, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	0099      	lsls	r1, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	fbb0 f3f3 	udiv	r3, r0, r3
 8001986:	3301      	adds	r3, #1
 8001988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	6809      	ldr	r1, [r1, #0]
 8001994:	4313      	orrs	r3, r2
 8001996:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69da      	ldr	r2, [r3, #28]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6911      	ldr	r1, [r2, #16]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68d2      	ldr	r2, [r2, #12]
 80019ca:	4311      	orrs	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	430b      	orrs	r3, r1
 80019d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	000186a0 	.word	0x000186a0
 8001a2c:	001e847f 	.word	0x001e847f
 8001a30:	003d08ff 	.word	0x003d08ff
 8001a34:	431bde83 	.word	0x431bde83
 8001a38:	10624dd3 	.word	0x10624dd3

08001a3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e128      	b.n	8001ca0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a90      	ldr	r2, [pc, #576]	; (8001ca8 <HAL_I2S_Init+0x26c>)
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7fe fedd 	bl	8000828 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a84:	f023 030f 	bic.w	r3, r3, #15
 8001a88:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d060      	beq.n	8001b5c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001aa2:	2310      	movs	r3, #16
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e001      	b.n	8001aac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d802      	bhi.n	8001aba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f002 fc2a 	bl	8004314 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ac0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aca:	d125      	bne.n	8001b18 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d010      	beq.n	8001af6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	3305      	adds	r3, #5
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	e01f      	b.n	8001b36 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	461a      	mov	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	3305      	adds	r3, #5
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	e00e      	b.n	8001b36 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	461a      	mov	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	3305      	adds	r3, #5
 8001b34:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4a5c      	ldr	r2, [pc, #368]	; (8001cac <HAL_I2S_Init+0x270>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	08db      	lsrs	r3, r3, #3
 8001b40:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	085b      	lsrs	r3, r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	e003      	b.n	8001b64 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d902      	bls.n	8001b70 <HAL_I2S_Init+0x134>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	2bff      	cmp	r3, #255	; 0xff
 8001b6e:	d907      	bls.n	8001b80 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f043 0210 	orr.w	r2, r3, #16
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e08f      	b.n	8001ca0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	ea42 0103 	orr.w	r1, r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b9e:	f023 030f 	bic.w	r3, r3, #15
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6851      	ldr	r1, [r2, #4]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6892      	ldr	r2, [r2, #8]
 8001baa:	4311      	orrs	r1, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68d2      	ldr	r2, [r2, #12]
 8001bb0:	4311      	orrs	r1, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6992      	ldr	r2, [r2, #24]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bc2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d161      	bne.n	8001c90 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a38      	ldr	r2, [pc, #224]	; (8001cb0 <HAL_I2S_Init+0x274>)
 8001bd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a37      	ldr	r2, [pc, #220]	; (8001cb4 <HAL_I2S_Init+0x278>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_I2S_Init+0x1a4>
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_I2S_Init+0x27c>)
 8001bde:	e001      	b.n	8001be4 <HAL_I2S_Init+0x1a8>
 8001be0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4932      	ldr	r1, [pc, #200]	; (8001cb4 <HAL_I2S_Init+0x278>)
 8001bec:	428a      	cmp	r2, r1
 8001bee:	d101      	bne.n	8001bf4 <HAL_I2S_Init+0x1b8>
 8001bf0:	4a31      	ldr	r2, [pc, #196]	; (8001cb8 <HAL_I2S_Init+0x27c>)
 8001bf2:	e001      	b.n	8001bf8 <HAL_I2S_Init+0x1bc>
 8001bf4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001bf8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bfc:	f023 030f 	bic.w	r3, r3, #15
 8001c00:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <HAL_I2S_Init+0x278>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_I2S_Init+0x1d4>
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_I2S_Init+0x27c>)
 8001c0e:	e001      	b.n	8001c14 <HAL_I2S_Init+0x1d8>
 8001c10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c14:	2202      	movs	r2, #2
 8001c16:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_I2S_Init+0x278>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_I2S_Init+0x1ea>
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_I2S_Init+0x27c>)
 8001c24:	e001      	b.n	8001c2a <HAL_I2S_Init+0x1ee>
 8001c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c36:	d003      	beq.n	8001c40 <HAL_I2S_Init+0x204>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	e001      	b.n	8001c4c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	897b      	ldrh	r3, [r7, #10]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c78:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <HAL_I2S_Init+0x278>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d101      	bne.n	8001c88 <HAL_I2S_Init+0x24c>
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_I2S_Init+0x27c>)
 8001c86:	e001      	b.n	8001c8c <HAL_I2S_Init+0x250>
 8001c88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c8c:	897a      	ldrh	r2, [r7, #10]
 8001c8e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	08001db3 	.word	0x08001db3
 8001cac:	cccccccd 	.word	0xcccccccd
 8001cb0:	08001ec9 	.word	0x08001ec9
 8001cb4:	40003800 	.word	0x40003800
 8001cb8:	40003400 	.word	0x40003400

08001cbc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	1c9a      	adds	r2, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10e      	bne.n	8001d4c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d3c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffb8 	bl	8001cbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	b292      	uxth	r2, r2
 8001d68:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	1c9a      	adds	r2, r3, #2
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10e      	bne.n	8001daa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d9a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff93 	bl	8001cd0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d13a      	bne.n	8001e44 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d109      	bne.n	8001dec <I2S_IRQHandler+0x3a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de2:	2b40      	cmp	r3, #64	; 0x40
 8001de4:	d102      	bne.n	8001dec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffb4 	bl	8001d54 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df2:	2b40      	cmp	r3, #64	; 0x40
 8001df4:	d126      	bne.n	8001e44 <I2S_IRQHandler+0x92>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d11f      	bne.n	8001e44 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f043 0202 	orr.w	r2, r3, #2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff50 	bl	8001ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d136      	bne.n	8001ebe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d109      	bne.n	8001e6e <I2S_IRQHandler+0xbc>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d102      	bne.n	8001e6e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff45 	bl	8001cf8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d122      	bne.n	8001ebe <I2S_IRQHandler+0x10c>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d11b      	bne.n	8001ebe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e94:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f043 0204 	orr.w	r2, r3, #4
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff13 	bl	8001ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a92      	ldr	r2, [pc, #584]	; (8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001ee2:	4b92      	ldr	r3, [pc, #584]	; (800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ee4:	e001      	b.n	8001eea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001ee6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a8b      	ldr	r2, [pc, #556]	; (8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001f00:	4b8a      	ldr	r3, [pc, #552]	; (800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f02:	e001      	b.n	8001f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f14:	d004      	beq.n	8001f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 8099 	bne.w	8002052 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d107      	bne.n	8001f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f925 	bl	8002184 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d107      	bne.n	8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f9c8 	bl	80022e4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5a:	2b40      	cmp	r3, #64	; 0x40
 8001f5c:	d13a      	bne.n	8001fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d035      	beq.n	8001fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a6e      	ldr	r2, [pc, #440]	; (8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d101      	bne.n	8001f76 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001f72:	4b6e      	ldr	r3, [pc, #440]	; (800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f74:	e001      	b.n	8001f7a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001f76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4969      	ldr	r1, [pc, #420]	; (8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f82:	428b      	cmp	r3, r1
 8001f84:	d101      	bne.n	8001f8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001f86:	4b69      	ldr	r3, [pc, #420]	; (800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f88:	e001      	b.n	8001f8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f92:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fa2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f043 0202 	orr.w	r2, r3, #2
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff fe88 	bl	8001ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	f040 80c3 	bne.w	8002166 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80bd 	beq.w	8002166 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ffa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a49      	ldr	r2, [pc, #292]	; (8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002006:	4b49      	ldr	r3, [pc, #292]	; (800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002008:	e001      	b.n	800200e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800200a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4944      	ldr	r1, [pc, #272]	; (8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002016:	428b      	cmp	r3, r1
 8002018:	d101      	bne.n	800201e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800201a:	4b44      	ldr	r3, [pc, #272]	; (800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800201c:	e001      	b.n	8002022 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800201e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002022:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002026:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f043 0204 	orr.w	r2, r3, #4
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fe4a 	bl	8001ce4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002050:	e089      	b.n	8002166 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b02      	cmp	r3, #2
 800205a:	d107      	bne.n	800206c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8be 	bl	80021e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d107      	bne.n	8002086 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f8fd 	bl	8002280 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b40      	cmp	r3, #64	; 0x40
 800208e:	d12f      	bne.n	80020f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d02a      	beq.n	80020f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020a8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020b6:	e001      	b.n	80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80020b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4919      	ldr	r1, [pc, #100]	; (8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020c4:	428b      	cmp	r3, r1
 80020c6:	d101      	bne.n	80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020ca:	e001      	b.n	80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80020cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f043 0202 	orr.w	r2, r3, #2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fdfa 	bl	8001ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d136      	bne.n	8002168 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d031      	beq.n	8002168 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d101      	bne.n	8002112 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002110:	e001      	b.n	8002116 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002112:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4902      	ldr	r1, [pc, #8]	; (8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800211e:	428b      	cmp	r3, r1
 8002120:	d106      	bne.n	8002130 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002122:	4b02      	ldr	r3, [pc, #8]	; (800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002124:	e006      	b.n	8002134 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002126:	bf00      	nop
 8002128:	40003800 	.word	0x40003800
 800212c:	40003400 	.word	0x40003400
 8002130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002134:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002138:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002148:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f043 0204 	orr.w	r2, r3, #4
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fdc0 	bl	8001ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002164:	e000      	b.n	8002168 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002166:	bf00      	nop
}
 8002168:	bf00      	nop
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	1c99      	adds	r1, r3, #2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6251      	str	r1, [r2, #36]	; 0x24
 8002196:	881a      	ldrh	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d113      	bne.n	80021de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ffc9 	bl	8002170 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	1c99      	adds	r1, r3, #2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6251      	str	r1, [r2, #36]	; 0x24
 80021fa:	8819      	ldrh	r1, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <I2SEx_TxISR_I2SExt+0x90>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <I2SEx_TxISR_I2SExt+0x22>
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <I2SEx_TxISR_I2SExt+0x94>)
 8002208:	e001      	b.n	800220e <I2SEx_TxISR_I2SExt+0x26>
 800220a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800220e:	460a      	mov	r2, r1
 8002210:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d121      	bne.n	800226e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <I2SEx_TxISR_I2SExt+0x90>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <I2SEx_TxISR_I2SExt+0x50>
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <I2SEx_TxISR_I2SExt+0x94>)
 8002236:	e001      	b.n	800223c <I2SEx_TxISR_I2SExt+0x54>
 8002238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	490d      	ldr	r1, [pc, #52]	; (8002278 <I2SEx_TxISR_I2SExt+0x90>)
 8002244:	428b      	cmp	r3, r1
 8002246:	d101      	bne.n	800224c <I2SEx_TxISR_I2SExt+0x64>
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <I2SEx_TxISR_I2SExt+0x94>)
 800224a:	e001      	b.n	8002250 <I2SEx_TxISR_I2SExt+0x68>
 800224c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002250:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002254:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff81 	bl	8002170 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40003800 	.word	0x40003800
 800227c:	40003400 	.word	0x40003400

08002280 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68d8      	ldr	r0, [r3, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	1c99      	adds	r1, r3, #2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002298:	b282      	uxth	r2, r0
 800229a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d113      	bne.n	80022dc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022c2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ff4a 	bl	8002170 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a20      	ldr	r2, [pc, #128]	; (8002374 <I2SEx_RxISR_I2SExt+0x90>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <I2SEx_RxISR_I2SExt+0x16>
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <I2SEx_RxISR_I2SExt+0x94>)
 80022f8:	e001      	b.n	80022fe <I2SEx_RxISR_I2SExt+0x1a>
 80022fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022fe:	68d8      	ldr	r0, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	1c99      	adds	r1, r3, #2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	62d1      	str	r1, [r2, #44]	; 0x2c
 800230a:	b282      	uxth	r2, r0
 800230c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d121      	bne.n	800236a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <I2SEx_RxISR_I2SExt+0x90>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <I2SEx_RxISR_I2SExt+0x50>
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <I2SEx_RxISR_I2SExt+0x94>)
 8002332:	e001      	b.n	8002338 <I2SEx_RxISR_I2SExt+0x54>
 8002334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	490d      	ldr	r1, [pc, #52]	; (8002374 <I2SEx_RxISR_I2SExt+0x90>)
 8002340:	428b      	cmp	r3, r1
 8002342:	d101      	bne.n	8002348 <I2SEx_RxISR_I2SExt+0x64>
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <I2SEx_RxISR_I2SExt+0x94>)
 8002346:	e001      	b.n	800234c <I2SEx_RxISR_I2SExt+0x68>
 8002348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800234c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002350:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d106      	bne.n	800236a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff03 	bl	8002170 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40003800 	.word	0x40003800
 8002378:	40003400 	.word	0x40003400

0800237c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	b08f      	sub	sp, #60	; 0x3c
 8002380:	af0a      	add	r7, sp, #40	; 0x28
 8002382:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e10f      	b.n	80025ae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d106      	bne.n	80023ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f005 fdbb 	bl	8007f24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2203      	movs	r2, #3
 80023b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f002 fc0a 	bl	8004be6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	687e      	ldr	r6, [r7, #4]
 80023da:	466d      	mov	r5, sp
 80023dc:	f106 0410 	add.w	r4, r6, #16
 80023e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f0:	1d33      	adds	r3, r6, #4
 80023f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f4:	6838      	ldr	r0, [r7, #0]
 80023f6:	f002 fae1 	bl	80049bc <USB_CoreInit>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0d0      	b.n	80025ae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f002 fbf8 	bl	8004c08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e04a      	b.n	80024b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	333d      	adds	r3, #61	; 0x3d
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	333c      	adds	r3, #60	; 0x3c
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	b298      	uxth	r0, r3
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3344      	adds	r3, #68	; 0x44
 800245a:	4602      	mov	r2, r0
 800245c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	3340      	adds	r3, #64	; 0x40
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	3348      	adds	r3, #72	; 0x48
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	334c      	adds	r3, #76	; 0x4c
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	3354      	adds	r3, #84	; 0x54
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	3301      	adds	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d3af      	bcc.n	800241e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	e044      	b.n	800254e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024da:	7bfa      	ldrb	r2, [r7, #15]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	3301      	adds	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	d3b5      	bcc.n	80024c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	687e      	ldr	r6, [r7, #4]
 8002560:	466d      	mov	r5, sp
 8002562:	f106 0410 	add.w	r4, r6, #16
 8002566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800256a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800256e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002572:	e885 0003 	stmia.w	r5, {r0, r1}
 8002576:	1d33      	adds	r3, r6, #4
 8002578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800257a:	6838      	ldr	r0, [r7, #0]
 800257c:	f002 fb90 	bl	8004ca0 <USB_DevInit>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e00d      	b.n	80025ae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fcdf 	bl	8005f6a <USB_DevDisconnect>

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_PCD_Start+0x1c>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e020      	b.n	8002614 <HAL_PCD_Start+0x5e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d109      	bne.n	80025f6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d005      	beq.n	80025f6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 fae2 	bl	8004bc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fc8f 	bl	8005f28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b08d      	sub	sp, #52	; 0x34
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fd4d 	bl	80060d2 <USB_GetMode>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 848a 	bne.w	8002f54 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f003 fcb1 	bl	8005fac <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8480 	beq.w	8002f52 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fc9e 	bl	8005fac <USB_ReadInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b02      	cmp	r3, #2
 8002678:	d107      	bne.n	800268a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f002 0202 	and.w	r2, r2, #2
 8002688:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f003 fc8c 	bl	8005fac <USB_ReadInterrupts>
 8002694:	4603      	mov	r3, r0
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b10      	cmp	r3, #16
 800269c:	d161      	bne.n	8002762 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699a      	ldr	r2, [r3, #24]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0210 	bic.w	r2, r2, #16
 80026ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f003 020f 	and.w	r2, r3, #15
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	3304      	adds	r3, #4
 80026cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	0c5b      	lsrs	r3, r3, #17
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d124      	bne.n	8002724 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d035      	beq.n	8002752 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	6a38      	ldr	r0, [r7, #32]
 80026fa:	f003 fac3 	bl	8005c84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800270a:	441a      	add	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800271c:	441a      	add	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	621a      	str	r2, [r3, #32]
 8002722:	e016      	b.n	8002752 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	0c5b      	lsrs	r3, r3, #17
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	2b06      	cmp	r3, #6
 800272e:	d110      	bne.n	8002752 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002736:	2208      	movs	r2, #8
 8002738:	4619      	mov	r1, r3
 800273a:	6a38      	ldr	r0, [r7, #32]
 800273c:	f003 faa2 	bl	8005c84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800274c:	441a      	add	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0210 	orr.w	r2, r2, #16
 8002760:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fc20 	bl	8005fac <USB_ReadInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002772:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002776:	f040 80a7 	bne.w	80028c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fc25 	bl	8005fd2 <USB_ReadDevAllOutEpInterrupt>
 8002788:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800278a:	e099      	b.n	80028c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 808e 	beq.w	80028b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fc49 	bl	800603a <USB_ReadDevOutEPInterrupt>
 80027a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00c      	beq.n	80027ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c0:	461a      	mov	r2, r3
 80027c2:	2301      	movs	r3, #1
 80027c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 feab 	bl	8003524 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00c      	beq.n	80027f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e4:	461a      	mov	r2, r3
 80027e6:	2308      	movs	r3, #8
 80027e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 ff81 	bl	80036f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002808:	461a      	mov	r2, r3
 800280a:	2310      	movs	r3, #16
 800280c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d030      	beq.n	800287a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d109      	bne.n	8002838 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002836:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	3304      	adds	r3, #4
 800284c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	78db      	ldrb	r3, [r3, #3]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d108      	bne.n	8002868 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	b2db      	uxtb	r3, r3
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f005 fc72 	bl	800814c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002874:	461a      	mov	r2, r3
 8002876:	2302      	movs	r3, #2
 8002878:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002890:	461a      	mov	r2, r3
 8002892:	2320      	movs	r3, #32
 8002894:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ac:	461a      	mov	r2, r3
 80028ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	3301      	adds	r3, #1
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f47f af62 	bne.w	800278c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fb6d 	bl	8005fac <USB_ReadInterrupts>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028dc:	f040 80db 	bne.w	8002a96 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 fb8e 	bl	8006006 <USB_ReadDevAllInEpInterrupt>
 80028ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028f0:	e0cd      	b.n	8002a8e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80c2 	beq.w	8002a82 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f003 fbb4 	bl	8006076 <USB_ReadDevInEPInterrupt>
 800290e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d057      	beq.n	80029ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	2201      	movs	r2, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	43db      	mvns	r3, r3
 8002934:	69f9      	ldr	r1, [r7, #28]
 8002936:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800293a:	4013      	ands	r3, r2
 800293c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800294a:	461a      	mov	r2, r3
 800294c:	2301      	movs	r3, #1
 800294e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d132      	bne.n	80029be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	334c      	adds	r3, #76	; 0x4c
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4403      	add	r3, r0
 8002978:	3348      	adds	r3, #72	; 0x48
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4419      	add	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4403      	add	r3, r0
 800298c:	334c      	adds	r3, #76	; 0x4c
 800298e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	2b00      	cmp	r3, #0
 8002994:	d113      	bne.n	80029be <HAL_PCD_IRQHandler+0x3a2>
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	3354      	adds	r3, #84	; 0x54
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d108      	bne.n	80029be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029b6:	461a      	mov	r2, r3
 80029b8:	2101      	movs	r1, #1
 80029ba:	f003 fbbb 	bl	8006134 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4619      	mov	r1, r3
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f005 fb3c 	bl	8008042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e0:	461a      	mov	r2, r3
 80029e2:	2308      	movs	r3, #8
 80029e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fc:	461a      	mov	r2, r3
 80029fe:	2310      	movs	r3, #16
 8002a00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2340      	movs	r3, #64	; 0x40
 8002a1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d023      	beq.n	8002a70 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a2a:	6a38      	ldr	r0, [r7, #32]
 8002a2c:	f002 fa9c 	bl	8004f68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	3338      	adds	r3, #56	; 0x38
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	3304      	adds	r3, #4
 8002a42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	78db      	ldrb	r3, [r3, #3]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d108      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4619      	mov	r1, r3
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f005 fb89 	bl	8008170 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fcc3 	bl	8003408 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	3301      	adds	r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f47f af2e 	bne.w	80028f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 fa86 	bl	8005fac <USB_ReadInterrupts>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aaa:	d122      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d108      	bne.n	8002adc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 feab 	bl	8003830 <HAL_PCDEx_LPM_Callback>
 8002ada:	e002      	b.n	8002ae2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f005 fb27 	bl	8008130 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f003 fa58 	bl	8005fac <USB_ReadInterrupts>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b06:	d112      	bne.n	8002b2e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f005 fae3 	bl	80080e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b2c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f003 fa3a 	bl	8005fac <USB_ReadInterrupts>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b42:	f040 80b7 	bne.w	8002cb4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2110      	movs	r1, #16
 8002b60:	4618      	mov	r0, r3
 8002b62:	f002 fa01 	bl	8004f68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6a:	e046      	b.n	8002bfa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b7e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b90:	0151      	lsls	r1, r2, #5
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	440a      	add	r2, r1
 8002b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bac:	461a      	mov	r2, r3
 8002bae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc4:	0151      	lsls	r1, r2, #5
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	440a      	add	r2, r1
 8002bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be4:	0151      	lsls	r1, r2, #5
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	440a      	add	r2, r1
 8002bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bf2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3b3      	bcc.n	8002b6c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c30:	f043 030b 	orr.w	r3, r3, #11
 8002c34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c46:	f043 030b 	orr.w	r3, r3, #11
 8002c4a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4c:	e015      	b.n	8002c7a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c60:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c74:	f043 030b 	orr.w	r3, r3, #11
 8002c78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f003 fa48 	bl	8006134 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 f977 	bl	8005fac <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc8:	d124      	bne.n	8002d14 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 fa0d 	bl	80060ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f002 f9c2 	bl	8005062 <USB_GetDevSpeed>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681c      	ldr	r4, [r3, #0]
 8002cea:	f001 fa11 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8002cee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f001 fec1 	bl	8004a80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f005 f9c7 	bl	8008092 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 f947 	bl	8005fac <USB_ReadInterrupts>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d10a      	bne.n	8002d3e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f005 f9a4 	bl	8008076 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f002 0208 	and.w	r2, r2, #8
 8002d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f003 f932 	bl	8005fac <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	d122      	bne.n	8002d98 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d5e:	2301      	movs	r3, #1
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	e014      	b.n	8002d8e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fb0f 	bl	80033a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d3e5      	bcc.n	8002d64 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 f905 	bl	8005fac <USB_ReadInterrupts>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dac:	d13b      	bne.n	8002e26 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dae:	2301      	movs	r3, #1
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	e02b      	b.n	8002e0c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3340      	adds	r3, #64	; 0x40
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d115      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da12      	bge.n	8002e06 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	333f      	adds	r3, #63	; 0x3f
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fad0 	bl	80033a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	3301      	adds	r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d3ce      	bcc.n	8002db4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 f8be 	bl	8005fac <USB_ReadInterrupts>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e3a:	d155      	bne.n	8002ee8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	e045      	b.n	8002ece <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d12e      	bne.n	8002ec8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	da2b      	bge.n	8002ec8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e7c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d121      	bne.n	8002ec8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec4:	6053      	str	r3, [r2, #4]
            break;
 8002ec6:	e007      	b.n	8002ed8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	3301      	adds	r3, #1
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d3b4      	bcc.n	8002e42 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 f85d 	bl	8005fac <USB_ReadInterrupts>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efc:	d10a      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f005 f948 	bl	8008194 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 f847 	bl	8005fac <USB_ReadInterrupts>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d115      	bne.n	8002f54 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f005 f938 	bl	80081b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	e000      	b.n	8002f54 <HAL_PCD_IRQHandler+0x938>
      return;
 8002f52:	bf00      	nop
    }
  }
}
 8002f54:	3734      	adds	r7, #52	; 0x34
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd90      	pop	{r4, r7, pc}

08002f5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_PCD_SetAddress+0x1a>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e013      	b.n	8002f9c <HAL_PCD_SetAddress+0x42>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f002 ffa5 	bl	8005edc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	70fb      	strb	r3, [r7, #3]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	803b      	strh	r3, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da0f      	bge.n	8002fea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 020f 	and.w	r2, r3, #15
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	3338      	adds	r3, #56	; 0x38
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	3304      	adds	r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	705a      	strb	r2, [r3, #1]
 8002fe8:	e00f      	b.n	800300a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	3304      	adds	r3, #4
 8003002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003016:	883a      	ldrh	r2, [r7, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	78ba      	ldrb	r2, [r7, #2]
 8003020:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	785b      	ldrb	r3, [r3, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003034:	78bb      	ldrb	r3, [r7, #2]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d102      	bne.n	8003040 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_PCD_EP_Open+0xaa>
 800304a:	2302      	movs	r3, #2
 800304c:	e00e      	b.n	800306c <HAL_PCD_EP_Open+0xc8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68f9      	ldr	r1, [r7, #12]
 800305c:	4618      	mov	r0, r3
 800305e:	f002 f825 	bl	80050ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800306a:	7afb      	ldrb	r3, [r7, #11]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003084:	2b00      	cmp	r3, #0
 8003086:	da0f      	bge.n	80030a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 020f 	and.w	r2, r3, #15
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	3338      	adds	r3, #56	; 0x38
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4413      	add	r3, r2
 800309c:	3304      	adds	r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	705a      	strb	r2, [r3, #1]
 80030a6:	e00f      	b.n	80030c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 020f 	and.w	r2, r3, #15
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	3304      	adds	r3, #4
 80030c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_PCD_EP_Close+0x6e>
 80030de:	2302      	movs	r3, #2
 80030e0:	e00e      	b.n	8003100 <HAL_PCD_EP_Close+0x8c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68f9      	ldr	r1, [r7, #12]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f002 f863 	bl	80051bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	460b      	mov	r3, r1
 8003116:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003118:	7afb      	ldrb	r3, [r7, #11]
 800311a:	f003 020f 	and.w	r2, r3, #15
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4413      	add	r3, r2
 800312e:	3304      	adds	r3, #4
 8003130:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2200      	movs	r2, #0
 8003148:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800314a:	7afb      	ldrb	r3, [r7, #11]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	b2da      	uxtb	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d102      	bne.n	8003164 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003164:	7afb      	ldrb	r3, [r7, #11]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	6979      	ldr	r1, [r7, #20]
 800317c:	f002 fb42 	bl	8005804 <USB_EP0StartXfer>
 8003180:	e008      	b.n	8003194 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	6979      	ldr	r1, [r7, #20]
 8003190:	f002 f8f0 	bl	8005374 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	460b      	mov	r3, r1
 80031ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ae:	7afb      	ldrb	r3, [r7, #11]
 80031b0:	f003 020f 	and.w	r2, r3, #15
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	3338      	adds	r3, #56	; 0x38
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2200      	movs	r2, #0
 80031d6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2201      	movs	r2, #1
 80031dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031f8:	7afb      	ldrb	r3, [r7, #11]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	6979      	ldr	r1, [r7, #20]
 8003210:	f002 faf8 	bl	8005804 <USB_EP0StartXfer>
 8003214:	e008      	b.n	8003228 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	6979      	ldr	r1, [r7, #20]
 8003224:	f002 f8a6 	bl	8005374 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d901      	bls.n	8003250 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e050      	b.n	80032f2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003254:	2b00      	cmp	r3, #0
 8003256:	da0f      	bge.n	8003278 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	f003 020f 	and.w	r2, r3, #15
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	3338      	adds	r3, #56	; 0x38
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	3304      	adds	r3, #4
 800326e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	705a      	strb	r2, [r3, #1]
 8003276:	e00d      	b.n	8003294 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_PCD_EP_SetStall+0x82>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e01e      	b.n	80032f2 <HAL_PCD_EP_SetStall+0xc0>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68f9      	ldr	r1, [r7, #12]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 fd36 	bl	8005d34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10a      	bne.n	80032e8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	b2d9      	uxtb	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032e2:	461a      	mov	r2, r3
 80032e4:	f002 ff26 	bl	8006134 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d901      	bls.n	8003318 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e042      	b.n	800339e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800331c:	2b00      	cmp	r3, #0
 800331e:	da0f      	bge.n	8003340 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	3338      	adds	r3, #56	; 0x38
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	3304      	adds	r3, #4
 8003336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	705a      	strb	r2, [r3, #1]
 800333e:	e00f      	b.n	8003360 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 020f 	and.w	r2, r3, #15
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	3304      	adds	r3, #4
 8003358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	b2da      	uxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_PCD_EP_ClrStall+0x86>
 800337c:	2302      	movs	r3, #2
 800337e:	e00e      	b.n	800339e <HAL_PCD_EP_ClrStall+0xa4>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68f9      	ldr	r1, [r7, #12]
 800338e:	4618      	mov	r0, r3
 8003390:	f002 fd3e 	bl	8005e10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	da0c      	bge.n	80033d4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 020f 	and.w	r2, r3, #15
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	3338      	adds	r3, #56	; 0x38
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	3304      	adds	r3, #4
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e00c      	b.n	80033ee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	f003 020f 	and.w	r2, r3, #15
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	3304      	adds	r3, #4
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68f9      	ldr	r1, [r7, #12]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f002 fb5d 	bl	8005ab4 <USB_EPStopXfer>
 80033fa:	4603      	mov	r3, r0
 80033fc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af02      	add	r7, sp, #8
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	3338      	adds	r3, #56	; 0x38
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	3304      	adds	r3, #4
 800342e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1a      	ldr	r2, [r3, #32]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	429a      	cmp	r2, r3
 800343a:	d901      	bls.n	8003440 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e06c      	b.n	800351a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	429a      	cmp	r2, r3
 8003454:	d902      	bls.n	800345c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	3303      	adds	r3, #3
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003464:	e02b      	b.n	80034be <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	429a      	cmp	r2, r3
 800347a:	d902      	bls.n	8003482 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3303      	adds	r3, #3
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6919      	ldr	r1, [r3, #16]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800349a:	b2db      	uxtb	r3, r3
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	4603      	mov	r3, r0
 80034a0:	6978      	ldr	r0, [r7, #20]
 80034a2:	f002 fbb1 	bl	8005c08 <USB_WritePacket>

    ep->xfer_buff  += len;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	441a      	add	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	441a      	add	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d809      	bhi.n	80034e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1a      	ldr	r2, [r3, #32]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034dc:	429a      	cmp	r2, r3
 80034de:	d203      	bcs.n	80034e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1be      	bne.n	8003466 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d811      	bhi.n	8003518 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	2201      	movs	r2, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	43db      	mvns	r3, r3
 800350e:	6939      	ldr	r1, [r7, #16]
 8003510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003514:	4013      	ands	r3, r2
 8003516:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	333c      	adds	r3, #60	; 0x3c
 800353c:	3304      	adds	r3, #4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	4413      	add	r3, r2
 800354a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d17b      	bne.n	8003652 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d015      	beq.n	8003590 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	4a61      	ldr	r2, [pc, #388]	; (80036ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	f240 80b9 	bls.w	80036e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80b3 	beq.w	80036e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	461a      	mov	r2, r3
 8003588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358c:	6093      	str	r3, [r2, #8]
 800358e:	e0a7      	b.n	80036e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a6:	461a      	mov	r2, r3
 80035a8:	2320      	movs	r3, #32
 80035aa:	6093      	str	r3, [r2, #8]
 80035ac:	e098      	b.n	80036e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f040 8093 	bne.w	80036e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	4a4b      	ldr	r2, [pc, #300]	; (80036ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d90f      	bls.n	80035e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d8:	461a      	mov	r2, r3
 80035da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035de:	6093      	str	r3, [r2, #8]
 80035e0:	e07e      	b.n	80036e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	4413      	add	r3, r2
 80035f4:	3304      	adds	r3, #4
 80035f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	0159      	lsls	r1, r3, #5
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	440b      	add	r3, r1
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360e:	1ad2      	subs	r2, r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d114      	bne.n	8003644 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800362c:	461a      	mov	r2, r3
 800362e:	2101      	movs	r1, #1
 8003630:	f002 fd80 	bl	8006134 <USB_EP0_OutStart>
 8003634:	e006      	b.n	8003644 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	441a      	add	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	4619      	mov	r1, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f004 fcde 	bl	800800c <HAL_PCD_DataOutStageCallback>
 8003650:	e046      	b.n	80036e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	4a26      	ldr	r2, [pc, #152]	; (80036f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d124      	bne.n	80036a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003670:	461a      	mov	r2, r3
 8003672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003676:	6093      	str	r3, [r2, #8]
 8003678:	e032      	b.n	80036e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003690:	461a      	mov	r2, r3
 8003692:	2320      	movs	r3, #32
 8003694:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f004 fcb5 	bl	800800c <HAL_PCD_DataOutStageCallback>
 80036a2:	e01d      	b.n	80036e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d114      	bne.n	80036d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036cc:	461a      	mov	r2, r3
 80036ce:	2100      	movs	r1, #0
 80036d0:	f002 fd30 	bl	8006134 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	4619      	mov	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f004 fc96 	bl	800800c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	4f54300a 	.word	0x4f54300a
 80036f0:	4f54310a 	.word	0x4f54310a

080036f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	333c      	adds	r3, #60	; 0x3c
 800370c:	3304      	adds	r3, #4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4a15      	ldr	r2, [pc, #84]	; (800377c <PCD_EP_OutSetupPacket_int+0x88>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d90e      	bls.n	8003748 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003730:	2b00      	cmp	r3, #0
 8003732:	d009      	beq.n	8003748 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003740:	461a      	mov	r2, r3
 8003742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003746:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f004 fc4d 	bl	8007fe8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a0a      	ldr	r2, [pc, #40]	; (800377c <PCD_EP_OutSetupPacket_int+0x88>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d90c      	bls.n	8003770 <PCD_EP_OutSetupPacket_int+0x7c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d108      	bne.n	8003770 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003768:	461a      	mov	r2, r3
 800376a:	2101      	movs	r1, #1
 800376c:	f002 fce2 	bl	8006134 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	4f54300a 	.word	0x4f54300a

08003780 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
 800378c:	4613      	mov	r3, r2
 800378e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d107      	bne.n	80037ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800379e:	883b      	ldrh	r3, [r7, #0]
 80037a0:	0419      	lsls	r1, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28
 80037ac:	e028      	b.n	8003800 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4413      	add	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037bc:	2300      	movs	r3, #0
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	e00d      	b.n	80037de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	3340      	adds	r3, #64	; 0x40
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	4413      	add	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	3301      	adds	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d3ec      	bcc.n	80037c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037e8:	883b      	ldrh	r3, [r7, #0]
 80037ea:	0418      	lsls	r0, r3, #16
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6819      	ldr	r1, [r3, #0]
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	4302      	orrs	r2, r0
 80037f8:	3340      	adds	r3, #64	; 0x40
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	887a      	ldrh	r2, [r7, #2]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e267      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d075      	beq.n	8003952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003866:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b04      	cmp	r3, #4
 8003870:	d00c      	beq.n	800388c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003872:	4b85      	ldr	r3, [pc, #532]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800387a:	2b08      	cmp	r3, #8
 800387c:	d112      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387e:	4b82      	ldr	r3, [pc, #520]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800388a:	d10b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	4b7e      	ldr	r3, [pc, #504]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d05b      	beq.n	8003950 <HAL_RCC_OscConfig+0x108>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d157      	bne.n	8003950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e242      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_OscConfig+0x74>
 80038ae:	4b76      	ldr	r3, [pc, #472]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a75      	ldr	r2, [pc, #468]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e01d      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x98>
 80038c6:	4b70      	ldr	r3, [pc, #448]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6f      	ldr	r2, [pc, #444]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b6d      	ldr	r3, [pc, #436]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a6c      	ldr	r2, [pc, #432]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e00b      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038e0:	4b69      	ldr	r3, [pc, #420]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a68      	ldr	r2, [pc, #416]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a65      	ldr	r2, [pc, #404]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d013      	beq.n	8003928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fd fc30 	bl	8001164 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003908:	f7fd fc2c 	bl	8001164 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e207      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0xc0>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fd fc1c 	bl	8001164 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003930:	f7fd fc18 	bl	8001164 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e1f3      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	4b51      	ldr	r3, [pc, #324]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0xe8>
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d063      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800395e:	4b4a      	ldr	r3, [pc, #296]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396a:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003972:	2b08      	cmp	r3, #8
 8003974:	d11c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003976:	4b44      	ldr	r3, [pc, #272]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d116      	bne.n	80039b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003982:	4b41      	ldr	r3, [pc, #260]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_RCC_OscConfig+0x152>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e1c7      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4937      	ldr	r1, [pc, #220]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	e03a      	b.n	8003a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b8:	4b34      	ldr	r3, [pc, #208]	; (8003a8c <HAL_RCC_OscConfig+0x244>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fd fbd1 	bl	8001164 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c6:	f7fd fbcd 	bl	8001164 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e1a8      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e4:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4925      	ldr	r1, [pc, #148]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]
 80039f8:	e015      	b.n	8003a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCC_OscConfig+0x244>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd fbb0 	bl	8001164 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a08:	f7fd fbac 	bl	8001164 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e187      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d036      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d016      	beq.n	8003a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_RCC_OscConfig+0x248>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd fb90 	bl	8001164 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a48:	f7fd fb8c 	bl	8001164 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e167      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x200>
 8003a66:	e01b      	b.n	8003aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCC_OscConfig+0x248>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fb79 	bl	8001164 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	e00e      	b.n	8003a94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fd fb75 	bl	8001164 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d907      	bls.n	8003a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e150      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	42470000 	.word	0x42470000
 8003a90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	4b88      	ldr	r3, [pc, #544]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ea      	bne.n	8003a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8097 	beq.w	8003bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b81      	ldr	r3, [pc, #516]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	4b7d      	ldr	r3, [pc, #500]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a7c      	ldr	r2, [pc, #496]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ace:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b77      	ldr	r3, [pc, #476]	; (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d118      	bne.n	8003b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aea:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a73      	ldr	r2, [pc, #460]	; (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af6:	f7fd fb35 	bl	8001164 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afe:	f7fd fb31 	bl	8001164 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e10c      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	4b6a      	ldr	r3, [pc, #424]	; (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x2ea>
 8003b24:	4b64      	ldr	r3, [pc, #400]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a63      	ldr	r2, [pc, #396]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b30:	e01c      	b.n	8003b6c <HAL_RCC_OscConfig+0x324>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x30c>
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	4a5e      	ldr	r2, [pc, #376]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b40:	f043 0304 	orr.w	r3, r3, #4
 8003b44:	6713      	str	r3, [r2, #112]	; 0x70
 8003b46:	4b5c      	ldr	r3, [pc, #368]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4a5b      	ldr	r2, [pc, #364]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6713      	str	r3, [r2, #112]	; 0x70
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0x324>
 8003b54:	4b58      	ldr	r3, [pc, #352]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	4a57      	ldr	r2, [pc, #348]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b60:	4b55      	ldr	r3, [pc, #340]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	4a54      	ldr	r2, [pc, #336]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b66:	f023 0304 	bic.w	r3, r3, #4
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d015      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b74:	f7fd faf6 	bl	8001164 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fd faf2 	bl	8001164 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0cb      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	4b49      	ldr	r3, [pc, #292]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ee      	beq.n	8003b7c <HAL_RCC_OscConfig+0x334>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba0:	f7fd fae0 	bl	8001164 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fd fadc 	bl	8001164 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0b5      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bbe:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ee      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd0:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	4a38      	ldr	r2, [pc, #224]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80a1 	beq.w	8003d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be6:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d05c      	beq.n	8003cac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d141      	bne.n	8003c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <HAL_RCC_OscConfig+0x478>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fd fab0 	bl	8001164 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd faac 	bl	8001164 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e087      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	041b      	lsls	r3, r3, #16
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	491b      	ldr	r1, [pc, #108]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c50:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_RCC_OscConfig+0x478>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fd fa85 	bl	8001164 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fd fa81 	bl	8001164 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e05c      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c70:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x416>
 8003c7c:	e054      	b.n	8003d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_RCC_OscConfig+0x478>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fd fa6e 	bl	8001164 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fd fa6a 	bl	8001164 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e045      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x444>
 8003caa:	e03d      	b.n	8003d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e038      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_RCC_OscConfig+0x4ec>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d028      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d121      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d11a      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d111      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d107      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800

08003d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0cc      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b68      	ldr	r3, [pc, #416]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d90c      	bls.n	8003d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b65      	ldr	r3, [pc, #404]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b63      	ldr	r3, [pc, #396]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0b8      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d8c:	4b59      	ldr	r3, [pc, #356]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a58      	ldr	r2, [pc, #352]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da4:	4b53      	ldr	r3, [pc, #332]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a52      	ldr	r2, [pc, #328]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db0:	4b50      	ldr	r3, [pc, #320]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	494d      	ldr	r1, [pc, #308]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d044      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d119      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d003      	beq.n	8003df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df6:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e06f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e06:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e067      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e16:	4b37      	ldr	r3, [pc, #220]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f023 0203 	bic.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4934      	ldr	r1, [pc, #208]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e28:	f7fd f99c 	bl	8001164 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e30:	f7fd f998 	bl	8001164 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e04f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 020c 	and.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d1eb      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d20c      	bcs.n	8003e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e032      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4916      	ldr	r1, [pc, #88]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	490e      	ldr	r1, [pc, #56]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ebe:	f000 f821 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	490a      	ldr	r1, [pc, #40]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	5ccb      	ldrb	r3, [r1, r3]
 8003ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed6:	4a09      	ldr	r2, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_RCC_ClockConfig+0x1c8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fd f8fc 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40023c00 	.word	0x40023c00
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	080085f8 	.word	0x080085f8
 8003efc:	20000008 	.word	0x20000008
 8003f00:	2000000c 	.word	0x2000000c

08003f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f08:	b094      	sub	sp, #80	; 0x50
 8003f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f10:	2300      	movs	r3, #0
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f14:	2300      	movs	r3, #0
 8003f16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f1c:	4b79      	ldr	r3, [pc, #484]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d00d      	beq.n	8003f44 <HAL_RCC_GetSysClockFreq+0x40>
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	f200 80e1 	bhi.w	80040f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x34>
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d003      	beq.n	8003f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f36:	e0db      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f38:	4b73      	ldr	r3, [pc, #460]	; (8004108 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f3c:	e0db      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f3e:	4b73      	ldr	r3, [pc, #460]	; (800410c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f42:	e0d8      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f44:	4b6f      	ldr	r3, [pc, #444]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f4e:	4b6d      	ldr	r3, [pc, #436]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d063      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5a:	4b6a      	ldr	r3, [pc, #424]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	2200      	movs	r2, #0
 8003f62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6e:	2300      	movs	r3, #0
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
 8003f72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	f04f 0000 	mov.w	r0, #0
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	0159      	lsls	r1, r3, #5
 8003f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f88:	0150      	lsls	r0, r2, #5
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4621      	mov	r1, r4
 8003f90:	1a51      	subs	r1, r2, r1
 8003f92:	6139      	str	r1, [r7, #16]
 8003f94:	4629      	mov	r1, r5
 8003f96:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa8:	4659      	mov	r1, fp
 8003faa:	018b      	lsls	r3, r1, #6
 8003fac:	4651      	mov	r1, sl
 8003fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fb2:	4651      	mov	r1, sl
 8003fb4:	018a      	lsls	r2, r1, #6
 8003fb6:	4651      	mov	r1, sl
 8003fb8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	eb63 0901 	sbc.w	r9, r3, r1
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd6:	4690      	mov	r8, r2
 8003fd8:	4699      	mov	r9, r3
 8003fda:	4623      	mov	r3, r4
 8003fdc:	eb18 0303 	adds.w	r3, r8, r3
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	462b      	mov	r3, r5
 8003fe4:	eb49 0303 	adc.w	r3, r9, r3
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	024b      	lsls	r3, r1, #9
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004000:	4621      	mov	r1, r4
 8004002:	024a      	lsls	r2, r1, #9
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400a:	2200      	movs	r2, #0
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
 800400e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004014:	f7fc f8d8 	bl	80001c8 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4613      	mov	r3, r2
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004020:	e058      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004022:	4b38      	ldr	r3, [pc, #224]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	2200      	movs	r2, #0
 800402a:	4618      	mov	r0, r3
 800402c:	4611      	mov	r1, r2
 800402e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004032:	623b      	str	r3, [r7, #32]
 8004034:	2300      	movs	r3, #0
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
 8004038:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	f04f 0000 	mov.w	r0, #0
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	0159      	lsls	r1, r3, #5
 800404a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800404e:	0150      	lsls	r0, r2, #5
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4641      	mov	r1, r8
 8004056:	ebb2 0a01 	subs.w	sl, r2, r1
 800405a:	4649      	mov	r1, r9
 800405c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800406c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004070:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004074:	ebb2 040a 	subs.w	r4, r2, sl
 8004078:	eb63 050b 	sbc.w	r5, r3, fp
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	00eb      	lsls	r3, r5, #3
 8004086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800408a:	00e2      	lsls	r2, r4, #3
 800408c:	4614      	mov	r4, r2
 800408e:	461d      	mov	r5, r3
 8004090:	4643      	mov	r3, r8
 8004092:	18e3      	adds	r3, r4, r3
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	464b      	mov	r3, r9
 8004098:	eb45 0303 	adc.w	r3, r5, r3
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040aa:	4629      	mov	r1, r5
 80040ac:	028b      	lsls	r3, r1, #10
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b4:	4621      	mov	r1, r4
 80040b6:	028a      	lsls	r2, r1, #10
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040be:	2200      	movs	r2, #0
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	61fa      	str	r2, [r7, #28]
 80040c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c8:	f7fc f87e 	bl	80001c8 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	3301      	adds	r3, #1
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ee:	e002      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetSysClockFreq+0x204>)
 80040f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3750      	adds	r7, #80	; 0x50
 80040fc:	46bd      	mov	sp, r7
 80040fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	00f42400 	.word	0x00f42400
 800410c:	007a1200 	.word	0x007a1200

08004110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_RCC_GetHCLKFreq+0x14>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000008 	.word	0x20000008

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800412c:	f7ff fff0 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0a9b      	lsrs	r3, r3, #10
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	; (800414c <HAL_RCC_GetPCLK1Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	08008608 	.word	0x08008608

08004150 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004174:	2b00      	cmp	r3, #0
 8004176:	d035      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004178:	4b62      	ldr	r3, [pc, #392]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800417e:	f7fc fff1 	bl	8001164 <HAL_GetTick>
 8004182:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004186:	f7fc ffed 	bl	8001164 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0b0      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004198:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f0      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	019a      	lsls	r2, r3, #6
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	071b      	lsls	r3, r3, #28
 80041b0:	4955      	ldr	r1, [pc, #340]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041b8:	4b52      	ldr	r3, [pc, #328]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041be:	f7fc ffd1 	bl	8001164 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041c6:	f7fc ffcd 	bl	8001164 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e090      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041d8:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8083 	beq.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	4b44      	ldr	r3, [pc, #272]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a43      	ldr	r2, [pc, #268]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800420e:	4b3f      	ldr	r3, [pc, #252]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a3e      	ldr	r2, [pc, #248]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004218:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800421a:	f7fc ffa3 	bl	8001164 <HAL_GetTick>
 800421e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004222:	f7fc ff9f 	bl	8001164 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e062      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004234:	4b35      	ldr	r3, [pc, #212]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004248:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02f      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	429a      	cmp	r2, r3
 800425c:	d028      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800425e:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004266:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004268:	4b29      	ldr	r3, [pc, #164]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800426e:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004274:	4a24      	ldr	r2, [pc, #144]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800427a:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b01      	cmp	r3, #1
 8004284:	d114      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004286:	f7fc ff6d 	bl	8001164 <HAL_GetTick>
 800428a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428c:	e00a      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fc ff69 	bl	8001164 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	; 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e02a      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a4:	4b18      	ldr	r3, [pc, #96]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ee      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042bc:	d10d      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d2:	490d      	ldr	r1, [pc, #52]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]
 80042d8:	e005      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042e4:	6093      	str	r3, [r2, #8]
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f2:	4905      	ldr	r1, [pc, #20]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	42470068 	.word	0x42470068
 8004308:	40023800 	.word	0x40023800
 800430c:	40007000 	.word	0x40007000
 8004310:	42470e40 	.word	0x42470e40

08004314 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d13e      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004332:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d12f      	bne.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004348:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800434a:	617b      	str	r3, [r7, #20]
          break;
 800434c:	e02f      	b.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800434e:	4b1c      	ldr	r3, [pc, #112]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435a:	d108      	bne.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800435c:	4b18      	ldr	r3, [pc, #96]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004364:	4a18      	ldr	r2, [pc, #96]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004366:	fbb2 f3f3 	udiv	r3, r2, r3
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	e007      	b.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800436e:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004376:	4a15      	ldr	r2, [pc, #84]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004384:	099b      	lsrs	r3, r3, #6
 8004386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	fb02 f303 	mul.w	r3, r2, r3
 8004390:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004398:	0f1b      	lsrs	r3, r3, #28
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
          break;
 80043a6:	e002      	b.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
          break;
 80043ac:	bf00      	nop
        }
      }
      break;
 80043ae:	bf00      	nop
    }
  }
  return frequency;
 80043b0:	697b      	ldr	r3, [r7, #20]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	00bb8000 	.word	0x00bb8000
 80043c8:	007a1200 	.word	0x007a1200
 80043cc:	00f42400 	.word	0x00f42400

080043d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e07b      	b.n	80044da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d108      	bne.n	80043fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f2:	d009      	beq.n	8004408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	61da      	str	r2, [r3, #28]
 80043fa:	e005      	b.n	8004408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fc fd50 	bl	8000ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	ea42 0103 	orr.w	r1, r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	f003 0104 	and.w	r1, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f003 0210 	and.w	r2, r3, #16
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b08c      	sub	sp, #48	; 0x30
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044f0:	2301      	movs	r3, #1
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x26>
 8004504:	2302      	movs	r3, #2
 8004506:	e18a      	b.n	800481e <HAL_SPI_TransmitReceive+0x33c>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004510:	f7fc fe28 	bl	8001164 <HAL_GetTick>
 8004514:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800451c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004526:	887b      	ldrh	r3, [r7, #2]
 8004528:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800452a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800452e:	2b01      	cmp	r3, #1
 8004530:	d00f      	beq.n	8004552 <HAL_SPI_TransmitReceive+0x70>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004538:	d107      	bne.n	800454a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <HAL_SPI_TransmitReceive+0x68>
 8004542:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004546:	2b04      	cmp	r3, #4
 8004548:	d003      	beq.n	8004552 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800454a:	2302      	movs	r3, #2
 800454c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004550:	e15b      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_SPI_TransmitReceive+0x82>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_SPI_TransmitReceive+0x82>
 800455e:	887b      	ldrh	r3, [r7, #2]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800456a:	e14e      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b04      	cmp	r3, #4
 8004576:	d003      	beq.n	8004580 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2205      	movs	r2, #5
 800457c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	887a      	ldrh	r2, [r7, #2]
 8004596:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	887a      	ldrh	r2, [r7, #2]
 80045a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	887a      	ldrh	r2, [r7, #2]
 80045a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d007      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045dc:	d178      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_SPI_TransmitReceive+0x10a>
 80045e6:	8b7b      	ldrh	r3, [r7, #26]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d166      	bne.n	80046ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	881a      	ldrh	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	1c9a      	adds	r2, r3, #2
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004610:	e053      	b.n	80046ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b02      	cmp	r3, #2
 800461e:	d11b      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x176>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d016      	beq.n	8004658 <HAL_SPI_TransmitReceive+0x176>
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d113      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	881a      	ldrh	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	1c9a      	adds	r2, r3, #2
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b01      	cmp	r3, #1
 8004664:	d119      	bne.n	800469a <HAL_SPI_TransmitReceive+0x1b8>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d014      	beq.n	800469a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	b292      	uxth	r2, r2
 800467c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004696:	2301      	movs	r3, #1
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800469a:	f7fc fd63 	bl	8001164 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d807      	bhi.n	80046ba <HAL_SPI_TransmitReceive+0x1d8>
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d003      	beq.n	80046ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046b8:	e0a7      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1a6      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x130>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1a1      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x130>
 80046ce:	e07c      	b.n	80047ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_SPI_TransmitReceive+0x1fc>
 80046d8:	8b7b      	ldrh	r3, [r7, #26]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d16b      	bne.n	80047b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	7812      	ldrb	r2, [r2, #0]
 80046ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004704:	e057      	b.n	80047b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b02      	cmp	r3, #2
 8004712:	d11c      	bne.n	800474e <HAL_SPI_TransmitReceive+0x26c>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d017      	beq.n	800474e <HAL_SPI_TransmitReceive+0x26c>
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d114      	bne.n	800474e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	330c      	adds	r3, #12
 800472e:	7812      	ldrb	r2, [r2, #0]
 8004730:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d119      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x2ae>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d014      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800478c:	2301      	movs	r3, #1
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004790:	f7fc fce8 	bl	8001164 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800479c:	429a      	cmp	r2, r3
 800479e:	d803      	bhi.n	80047a8 <HAL_SPI_TransmitReceive+0x2c6>
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d102      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x2cc>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047b4:	e029      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1a2      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x224>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d19d      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f8b2 	bl	8004938 <SPI_EndRxTxTransaction>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047e6:	e010      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	e000      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004808:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800481a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800481e:	4618      	mov	r0, r3
 8004820:	3730      	adds	r7, #48	; 0x30
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004838:	f7fc fc94 	bl	8001164 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	4413      	add	r3, r2
 8004846:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004848:	f7fc fc8c 	bl	8001164 <HAL_GetTick>
 800484c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800484e:	4b39      	ldr	r3, [pc, #228]	; (8004934 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	015b      	lsls	r3, r3, #5
 8004854:	0d1b      	lsrs	r3, r3, #20
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	fb02 f303 	mul.w	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	e054      	b.n	800490a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d050      	beq.n	800490a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004868:	f7fc fc7c 	bl	8001164 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	429a      	cmp	r2, r3
 8004876:	d902      	bls.n	800487e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d13d      	bne.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800488c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004896:	d111      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a0:	d004      	beq.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048aa:	d107      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	d10f      	bne.n	80048e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e017      	b.n	800492a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	3b01      	subs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	429a      	cmp	r2, r3
 8004926:	d19b      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000008 	.word	0x20000008

08004938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <SPI_EndRxTxTransaction+0x7c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <SPI_EndRxTxTransaction+0x80>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	0d5b      	lsrs	r3, r3, #21
 8004950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004954:	fb02 f303 	mul.w	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004962:	d112      	bne.n	800498a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	2180      	movs	r1, #128	; 0x80
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff ff5a 	bl	8004828 <SPI_WaitFlagStateUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e00f      	b.n	80049aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	3b01      	subs	r3, #1
 8004994:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b80      	cmp	r3, #128	; 0x80
 80049a2:	d0f2      	beq.n	800498a <SPI_EndRxTxTransaction+0x52>
 80049a4:	e000      	b.n	80049a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80049a6:	bf00      	nop
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000008 	.word	0x20000008
 80049b8:	165e9f81 	.word	0x165e9f81

080049bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049bc:	b084      	sub	sp, #16
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	f107 001c 	add.w	r0, r7, #28
 80049ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d122      	bne.n	8004a1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d105      	bne.n	8004a0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f001 fbee 	bl	80061f0 <USB_CoreReset>
 8004a14:	4603      	mov	r3, r0
 8004a16:	73fb      	strb	r3, [r7, #15]
 8004a18:	e01a      	b.n	8004a50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f001 fbe2 	bl	80061f0 <USB_CoreReset>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	639a      	str	r2, [r3, #56]	; 0x38
 8004a42:	e005      	b.n	8004a50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d10b      	bne.n	8004a6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f043 0206 	orr.w	r2, r3, #6
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a7a:	b004      	add	sp, #16
 8004a7c:	4770      	bx	lr
	...

08004a80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d165      	bne.n	8004b60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4a41      	ldr	r2, [pc, #260]	; (8004b9c <USB_SetTurnaroundTime+0x11c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d906      	bls.n	8004aaa <USB_SetTurnaroundTime+0x2a>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4a40      	ldr	r2, [pc, #256]	; (8004ba0 <USB_SetTurnaroundTime+0x120>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d202      	bcs.n	8004aaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004aa4:	230f      	movs	r3, #15
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	e062      	b.n	8004b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4a3c      	ldr	r2, [pc, #240]	; (8004ba0 <USB_SetTurnaroundTime+0x120>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d306      	bcc.n	8004ac0 <USB_SetTurnaroundTime+0x40>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4a3b      	ldr	r2, [pc, #236]	; (8004ba4 <USB_SetTurnaroundTime+0x124>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d202      	bcs.n	8004ac0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004aba:	230e      	movs	r3, #14
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e057      	b.n	8004b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4a38      	ldr	r2, [pc, #224]	; (8004ba4 <USB_SetTurnaroundTime+0x124>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d306      	bcc.n	8004ad6 <USB_SetTurnaroundTime+0x56>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4a37      	ldr	r2, [pc, #220]	; (8004ba8 <USB_SetTurnaroundTime+0x128>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d202      	bcs.n	8004ad6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ad0:	230d      	movs	r3, #13
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e04c      	b.n	8004b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4a33      	ldr	r2, [pc, #204]	; (8004ba8 <USB_SetTurnaroundTime+0x128>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d306      	bcc.n	8004aec <USB_SetTurnaroundTime+0x6c>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4a32      	ldr	r2, [pc, #200]	; (8004bac <USB_SetTurnaroundTime+0x12c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d802      	bhi.n	8004aec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ae6:	230c      	movs	r3, #12
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e041      	b.n	8004b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4a2f      	ldr	r2, [pc, #188]	; (8004bac <USB_SetTurnaroundTime+0x12c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d906      	bls.n	8004b02 <USB_SetTurnaroundTime+0x82>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4a2e      	ldr	r2, [pc, #184]	; (8004bb0 <USB_SetTurnaroundTime+0x130>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d802      	bhi.n	8004b02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004afc:	230b      	movs	r3, #11
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e036      	b.n	8004b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4a2a      	ldr	r2, [pc, #168]	; (8004bb0 <USB_SetTurnaroundTime+0x130>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d906      	bls.n	8004b18 <USB_SetTurnaroundTime+0x98>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4a29      	ldr	r2, [pc, #164]	; (8004bb4 <USB_SetTurnaroundTime+0x134>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d802      	bhi.n	8004b18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b12:	230a      	movs	r3, #10
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e02b      	b.n	8004b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <USB_SetTurnaroundTime+0x134>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d906      	bls.n	8004b2e <USB_SetTurnaroundTime+0xae>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4a25      	ldr	r2, [pc, #148]	; (8004bb8 <USB_SetTurnaroundTime+0x138>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d202      	bcs.n	8004b2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b28:	2309      	movs	r3, #9
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	e020      	b.n	8004b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4a21      	ldr	r2, [pc, #132]	; (8004bb8 <USB_SetTurnaroundTime+0x138>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d306      	bcc.n	8004b44 <USB_SetTurnaroundTime+0xc4>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4a20      	ldr	r2, [pc, #128]	; (8004bbc <USB_SetTurnaroundTime+0x13c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d802      	bhi.n	8004b44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b3e:	2308      	movs	r3, #8
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	e015      	b.n	8004b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4a1d      	ldr	r2, [pc, #116]	; (8004bbc <USB_SetTurnaroundTime+0x13c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d906      	bls.n	8004b5a <USB_SetTurnaroundTime+0xda>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4a1c      	ldr	r2, [pc, #112]	; (8004bc0 <USB_SetTurnaroundTime+0x140>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d202      	bcs.n	8004b5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b54:	2307      	movs	r3, #7
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e00a      	b.n	8004b70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b5a:	2306      	movs	r3, #6
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	e007      	b.n	8004b70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b66:	2309      	movs	r3, #9
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	e001      	b.n	8004b70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b6c:	2309      	movs	r3, #9
 8004b6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	029b      	lsls	r3, r3, #10
 8004b84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	00d8acbf 	.word	0x00d8acbf
 8004ba0:	00e4e1c0 	.word	0x00e4e1c0
 8004ba4:	00f42400 	.word	0x00f42400
 8004ba8:	01067380 	.word	0x01067380
 8004bac:	011a499f 	.word	0x011a499f
 8004bb0:	01312cff 	.word	0x01312cff
 8004bb4:	014ca43f 	.word	0x014ca43f
 8004bb8:	016e3600 	.word	0x016e3600
 8004bbc:	01a6ab1f 	.word	0x01a6ab1f
 8004bc0:	01e84800 	.word	0x01e84800

08004bc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f043 0201 	orr.w	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 0201 	bic.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d115      	bne.n	8004c56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c36:	2001      	movs	r0, #1
 8004c38:	f7fc faa0 	bl	800117c <HAL_Delay>
      ms++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f001 fa45 	bl	80060d2 <USB_GetMode>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d01e      	beq.n	8004c8c <USB_SetCurrentMode+0x84>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b31      	cmp	r3, #49	; 0x31
 8004c52:	d9f0      	bls.n	8004c36 <USB_SetCurrentMode+0x2e>
 8004c54:	e01a      	b.n	8004c8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d115      	bne.n	8004c88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c68:	2001      	movs	r0, #1
 8004c6a:	f7fc fa87 	bl	800117c <HAL_Delay>
      ms++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f001 fa2c 	bl	80060d2 <USB_GetMode>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <USB_SetCurrentMode+0x84>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b31      	cmp	r3, #49	; 0x31
 8004c84:	d9f0      	bls.n	8004c68 <USB_SetCurrentMode+0x60>
 8004c86:	e001      	b.n	8004c8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e005      	b.n	8004c98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b32      	cmp	r3, #50	; 0x32
 8004c90:	d101      	bne.n	8004c96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b086      	sub	sp, #24
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	e009      	b.n	8004cd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	3340      	adds	r3, #64	; 0x40
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	2200      	movs	r2, #0
 8004ccc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b0e      	cmp	r3, #14
 8004cd8:	d9f2      	bls.n	8004cc0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d11c      	bne.n	8004d1a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cee:	f043 0302 	orr.w	r3, r3, #2
 8004cf2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38
 8004d18:	e00b      	b.n	8004d32 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d38:	461a      	mov	r2, r3
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d44:	4619      	mov	r1, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	680b      	ldr	r3, [r1, #0]
 8004d50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d10c      	bne.n	8004d72 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d5e:	2100      	movs	r1, #0
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f965 	bl	8005030 <USB_SetDevSpeed>
 8004d66:	e008      	b.n	8004d7a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d68:	2101      	movs	r1, #1
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f960 	bl	8005030 <USB_SetDevSpeed>
 8004d70:	e003      	b.n	8004d7a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d72:	2103      	movs	r1, #3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f95b 	bl	8005030 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d7a:	2110      	movs	r1, #16
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f8f3 	bl	8004f68 <USB_FlushTxFifo>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f91f 	bl	8004fd0 <USB_FlushRxFifo>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	461a      	mov	r2, r3
 8004da4:	2300      	movs	r3, #0
 8004da6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	461a      	mov	r2, r3
 8004db0:	2300      	movs	r3, #0
 8004db2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e043      	b.n	8004e4e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ddc:	d118      	bne.n	8004e10 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	461a      	mov	r2, r3
 8004df2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	e013      	b.n	8004e22 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	461a      	mov	r2, r3
 8004e08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e008      	b.n	8004e22 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2300      	movs	r3, #0
 8004e20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2300      	movs	r3, #0
 8004e32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	461a      	mov	r2, r3
 8004e42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d3b7      	bcc.n	8004dc6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	e043      	b.n	8004ee4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e72:	d118      	bne.n	8004ea6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	461a      	mov	r2, r3
 8004e88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e013      	b.n	8004eb8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	e008      	b.n	8004eb8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004edc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d3b7      	bcc.n	8004e5c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004efe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f043 0210 	orr.w	r2, r3, #16
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <USB_DevInit+0x2c4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f043 0208 	orr.w	r2, r3, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d107      	bne.n	8004f54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f4c:	f043 0304 	orr.w	r3, r3, #4
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f60:	b004      	add	sp, #16
 8004f62:	4770      	bx	lr
 8004f64:	803c3800 	.word	0x803c3800

08004f68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a13      	ldr	r2, [pc, #76]	; (8004fcc <USB_FlushTxFifo+0x64>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e01b      	b.n	8004fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	daf2      	bge.n	8004f76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	019b      	lsls	r3, r3, #6
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4a08      	ldr	r2, [pc, #32]	; (8004fcc <USB_FlushTxFifo+0x64>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e006      	b.n	8004fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d0f0      	beq.n	8004fa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	00030d40 	.word	0x00030d40

08004fd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a11      	ldr	r2, [pc, #68]	; (800502c <USB_FlushRxFifo+0x5c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e018      	b.n	8005020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	daf2      	bge.n	8004fdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <USB_FlushRxFifo+0x5c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e006      	b.n	8005020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b10      	cmp	r3, #16
 800501c:	d0f0      	beq.n	8005000 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	00030d40 	.word	0x00030d40

08005030 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005050:	4313      	orrs	r3, r2
 8005052:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005062:	b480      	push	{r7}
 8005064:	b087      	sub	sp, #28
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0306 	and.w	r3, r3, #6
 800507a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]
 8005086:	e00a      	b.n	800509e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d002      	beq.n	8005094 <USB_GetDevSpeed+0x32>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b06      	cmp	r3, #6
 8005092:	d102      	bne.n	800509a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005094:	2302      	movs	r3, #2
 8005096:	75fb      	strb	r3, [r7, #23]
 8005098:	e001      	b.n	800509e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800509a:	230f      	movs	r3, #15
 800509c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800509e:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d13a      	bne.n	800513e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	2101      	movs	r1, #1
 80050da:	fa01 f303 	lsl.w	r3, r1, r3
 80050de:	b29b      	uxth	r3, r3
 80050e0:	68f9      	ldr	r1, [r7, #12]
 80050e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d155      	bne.n	80051ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	791b      	ldrb	r3, [r3, #4]
 800511a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800511c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	059b      	lsls	r3, r3, #22
 8005122:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005124:	4313      	orrs	r3, r2
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	440a      	add	r2, r1
 800512e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	e036      	b.n	80051ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005144:	69da      	ldr	r2, [r3, #28]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	2101      	movs	r1, #1
 8005150:	fa01 f303 	lsl.w	r3, r1, r3
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	68f9      	ldr	r1, [r7, #12]
 8005158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800515c:	4313      	orrs	r3, r2
 800515e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d11a      	bne.n	80051ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	791b      	ldrb	r3, [r3, #4]
 8005190:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005192:	430b      	orrs	r3, r1
 8005194:	4313      	orrs	r3, r2
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d161      	bne.n	800529c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ee:	d11f      	bne.n	8005230 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	440a      	add	r2, r1
 8005206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800520e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800522e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	b29b      	uxth	r3, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005250:	4013      	ands	r3, r2
 8005252:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	b29b      	uxth	r3, r3
 800526c:	43db      	mvns	r3, r3
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005274:	4013      	ands	r3, r2
 8005276:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	0159      	lsls	r1, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	440b      	add	r3, r1
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	4619      	mov	r1, r3
 8005294:	4b35      	ldr	r3, [pc, #212]	; (800536c <USB_DeactivateEndpoint+0x1b0>)
 8005296:	4013      	ands	r3, r2
 8005298:	600b      	str	r3, [r1, #0]
 800529a:	e060      	b.n	800535e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b2:	d11f      	bne.n	80052f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	0151      	lsls	r1, r2, #5
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	440a      	add	r2, r1
 80052ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	2101      	movs	r1, #1
 8005306:	fa01 f303 	lsl.w	r3, r1, r3
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	43db      	mvns	r3, r3
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005314:	4013      	ands	r3, r2
 8005316:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	2101      	movs	r1, #1
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	041b      	lsls	r3, r3, #16
 8005330:	43db      	mvns	r3, r3
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005338:	4013      	ands	r3, r2
 800533a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	0159      	lsls	r1, r3, #5
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	440b      	add	r3, r1
 8005352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005356:	4619      	mov	r1, r3
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <USB_DeactivateEndpoint+0x1b4>)
 800535a:	4013      	ands	r3, r2
 800535c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	ec337800 	.word	0xec337800
 8005370:	eff37800 	.word	0xeff37800

08005374 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	; 0x28
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	4613      	mov	r3, r2
 8005380:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	2b01      	cmp	r3, #1
 8005392:	f040 815c 	bne.w	800564e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d132      	bne.n	8005404 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fc:	0cdb      	lsrs	r3, r3, #19
 80053fe:	04db      	lsls	r3, r3, #19
 8005400:	6113      	str	r3, [r2, #16]
 8005402:	e074      	b.n	80054ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541e:	0cdb      	lsrs	r3, r3, #19
 8005420:	04db      	lsls	r3, r3, #19
 8005422:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005442:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6999      	ldr	r1, [r3, #24]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	440b      	add	r3, r1
 8005460:	1e59      	subs	r1, r3, #1
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	fbb1 f3f3 	udiv	r3, r1, r3
 800546a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800546c:	4b9d      	ldr	r3, [pc, #628]	; (80056e4 <USB_EPStartXfer+0x370>)
 800546e:	400b      	ands	r3, r1
 8005470:	69b9      	ldr	r1, [r7, #24]
 8005472:	0148      	lsls	r0, r1, #5
 8005474:	69f9      	ldr	r1, [r7, #28]
 8005476:	4401      	add	r1, r0
 8005478:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800547c:	4313      	orrs	r3, r2
 800547e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005496:	69b9      	ldr	r1, [r7, #24]
 8005498:	0148      	lsls	r0, r1, #5
 800549a:	69f9      	ldr	r1, [r7, #28]
 800549c:	4401      	add	r1, r0
 800549e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054a2:	4313      	orrs	r3, r2
 80054a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	791b      	ldrb	r3, [r3, #4]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d11f      	bne.n	80054ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d14b      	bne.n	800558c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	461a      	mov	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	791b      	ldrb	r3, [r3, #4]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d128      	bne.n	800556a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d110      	bne.n	800554a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	440a      	add	r2, r1
 800553e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005542:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	e00f      	b.n	800556a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005568:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	440a      	add	r2, r1
 8005580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005584:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e133      	b.n	80057f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	791b      	ldrb	r3, [r3, #4]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d015      	beq.n	80055e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 811b 	beq.w	80057f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	2101      	movs	r1, #1
 80055d0:	fa01 f303 	lsl.w	r3, r1, r3
 80055d4:	69f9      	ldr	r1, [r7, #28]
 80055d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055da:	4313      	orrs	r3, r2
 80055dc:	634b      	str	r3, [r1, #52]	; 0x34
 80055de:	e109      	b.n	80057f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d110      	bne.n	8005612 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	0151      	lsls	r1, r2, #5
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	440a      	add	r2, r1
 8005606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	e00f      	b.n	8005632 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005630:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6919      	ldr	r1, [r3, #16]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	781a      	ldrb	r2, [r3, #0]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	b298      	uxth	r0, r3
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	4603      	mov	r3, r0
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fade 	bl	8005c08 <USB_WritePacket>
 800564c:	e0d2      	b.n	80057f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005668:	0cdb      	lsrs	r3, r3, #19
 800566a:	04db      	lsls	r3, r3, #19
 800566c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005688:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800568c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005690:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d126      	bne.n	80056e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b0:	69b9      	ldr	r1, [r7, #24]
 80056b2:	0148      	lsls	r0, r1, #5
 80056b4:	69f9      	ldr	r1, [r7, #28]
 80056b6:	4401      	add	r1, r0
 80056b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056bc:	4313      	orrs	r3, r2
 80056be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056de:	6113      	str	r3, [r2, #16]
 80056e0:	e03a      	b.n	8005758 <USB_EPStartXfer+0x3e4>
 80056e2:	bf00      	nop
 80056e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	699a      	ldr	r2, [r3, #24]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	1e5a      	subs	r2, r3, #1
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	8afa      	ldrh	r2, [r7, #22]
 8005704:	fb03 f202 	mul.w	r2, r3, r2
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	8afb      	ldrh	r3, [r7, #22]
 800571c:	04d9      	lsls	r1, r3, #19
 800571e:	4b38      	ldr	r3, [pc, #224]	; (8005800 <USB_EPStartXfer+0x48c>)
 8005720:	400b      	ands	r3, r1
 8005722:	69b9      	ldr	r1, [r7, #24]
 8005724:	0148      	lsls	r0, r1, #5
 8005726:	69f9      	ldr	r1, [r7, #28]
 8005728:	4401      	add	r1, r0
 800572a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800572e:	4313      	orrs	r3, r2
 8005730:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005748:	69b9      	ldr	r1, [r7, #24]
 800574a:	0148      	lsls	r0, r1, #5
 800574c:	69f9      	ldr	r1, [r7, #28]
 800574e:	4401      	add	r1, r0
 8005750:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005754:	4313      	orrs	r3, r2
 8005756:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d10d      	bne.n	800577a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6919      	ldr	r1, [r3, #16]
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	460a      	mov	r2, r1
 8005778:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	791b      	ldrb	r3, [r3, #4]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d128      	bne.n	80057d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578e:	2b00      	cmp	r3, #0
 8005790:	d110      	bne.n	80057b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e00f      	b.n	80057d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	1ff80000 	.word	0x1ff80000

08005804 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	2b01      	cmp	r3, #1
 8005822:	f040 80ce 	bne.w	80059c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d132      	bne.n	8005894 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005848:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800584c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005850:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005870:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588c:	0cdb      	lsrs	r3, r3, #19
 800588e:	04db      	lsls	r3, r3, #19
 8005890:	6113      	str	r3, [r2, #16]
 8005892:	e04e      	b.n	8005932 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ae:	0cdb      	lsrs	r3, r3, #19
 80058b0:	04db      	lsls	r3, r3, #19
 80058b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	699a      	ldr	r2, [r3, #24]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d903      	bls.n	80058ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	0151      	lsls	r1, r2, #5
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	440a      	add	r2, r1
 8005902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800590a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005922:	6939      	ldr	r1, [r7, #16]
 8005924:	0148      	lsls	r0, r1, #5
 8005926:	6979      	ldr	r1, [r7, #20]
 8005928:	4401      	add	r1, r0
 800592a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800592e:	4313      	orrs	r3, r2
 8005930:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d11e      	bne.n	8005976 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d009      	beq.n	8005954 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594c:	461a      	mov	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	e097      	b.n	8005aa6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005990:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005994:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8083 	beq.w	8005aa6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	2101      	movs	r1, #1
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	6979      	ldr	r1, [r7, #20]
 80059b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059bc:	4313      	orrs	r3, r2
 80059be:	634b      	str	r3, [r1, #52]	; 0x34
 80059c0:	e071      	b.n	8005aa6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059dc:	0cdb      	lsrs	r3, r3, #19
 80059de:	04db      	lsls	r3, r3, #19
 80059e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a54:	6939      	ldr	r1, [r7, #16]
 8005a56:	0148      	lsls	r0, r1, #5
 8005a58:	6979      	ldr	r1, [r7, #20]
 8005a5a:	4401      	add	r1, r0
 8005a5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a60:	4313      	orrs	r3, r2
 8005a62:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d10d      	bne.n	8005a86 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6919      	ldr	r1, [r3, #16]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	460a      	mov	r2, r1
 8005a84:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005aa4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d14a      	bne.n	8005b68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aea:	f040 8086 	bne.w	8005bfa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	7812      	ldrb	r2, [r2, #0]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d902      	bls.n	8005b4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	75fb      	strb	r3, [r7, #23]
          break;
 8005b4a:	e056      	b.n	8005bfa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b64:	d0e7      	beq.n	8005b36 <USB_EPStopXfer+0x82>
 8005b66:	e048      	b.n	8005bfa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b80:	d13b      	bne.n	8005bfa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	7812      	ldrb	r2, [r2, #0]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ba4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d902      	bls.n	8005be0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
          break;
 8005bde:	e00c      	b.n	8005bfa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bf8:	d0e7      	beq.n	8005bca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b089      	sub	sp, #36	; 0x24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4611      	mov	r1, r2
 8005c14:	461a      	mov	r2, r3
 8005c16:	460b      	mov	r3, r1
 8005c18:	71fb      	strb	r3, [r7, #7]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d123      	bne.n	8005c76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c2e:	88bb      	ldrh	r3, [r7, #4]
 8005c30:	3303      	adds	r3, #3
 8005c32:	089b      	lsrs	r3, r3, #2
 8005c34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	e018      	b.n	8005c6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	031a      	lsls	r2, r3, #12
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c48:	461a      	mov	r2, r3
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	3301      	adds	r3, #1
 8005c54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	3301      	adds	r3, #1
 8005c66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d3e2      	bcc.n	8005c3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3724      	adds	r7, #36	; 0x24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b08b      	sub	sp, #44	; 0x2c
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	089b      	lsrs	r3, r3, #2
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005caa:	2300      	movs	r3, #0
 8005cac:	623b      	str	r3, [r7, #32]
 8005cae:	e014      	b.n	8005cda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	3301      	adds	r3, #1
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	623b      	str	r3, [r7, #32]
 8005cda:	6a3a      	ldr	r2, [r7, #32]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d3e6      	bcc.n	8005cb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ce2:	8bfb      	ldrh	r3, [r7, #30]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01e      	beq.n	8005d26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f107 0310 	add.w	r3, r7, #16
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	fa22 f303 	lsr.w	r3, r2, r3
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	701a      	strb	r2, [r3, #0]
      i++;
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	3301      	adds	r3, #1
 8005d12:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	3301      	adds	r3, #1
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d1a:	8bfb      	ldrh	r3, [r7, #30]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d20:	8bfb      	ldrh	r3, [r7, #30]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1ea      	bne.n	8005cfc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	372c      	adds	r7, #44	; 0x2c
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	785b      	ldrb	r3, [r3, #1]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d12c      	bne.n	8005daa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	db12      	blt.n	8005d88 <USB_EPSetStall+0x54>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00f      	beq.n	8005d88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	0151      	lsls	r1, r2, #5
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	440a      	add	r2, r1
 8005d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	e02b      	b.n	8005e02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	db12      	blt.n	8005de2 <USB_EPSetStall+0xae>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00f      	beq.n	8005de2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ddc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005de0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d128      	bne.n	8005e7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	791b      	ldrb	r3, [r3, #4]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d003      	beq.n	8005e5c <USB_EPClearStall+0x4c>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	791b      	ldrb	r3, [r3, #4]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d138      	bne.n	8005ece <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	e027      	b.n	8005ece <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	791b      	ldrb	r3, [r3, #4]
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d003      	beq.n	8005eae <USB_EPClearStall+0x9e>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	791b      	ldrb	r3, [r3, #4]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d10f      	bne.n	8005ece <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ecc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005efa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005efe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f10:	68f9      	ldr	r1, [r7, #12]
 8005f12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f16:	4313      	orrs	r3, r2
 8005f18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f42:	f023 0303 	bic.w	r3, r3, #3
 8005f46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f56:	f023 0302 	bic.w	r3, r3, #2
 8005f5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f84:	f023 0303 	bic.w	r3, r3, #3
 8005f88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f98:	f043 0302 	orr.w	r3, r3, #2
 8005f9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	0c1b      	lsrs	r3, r3, #16
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	4013      	ands	r3, r2
 8006028:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	b29b      	uxth	r3, r3
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	4013      	ands	r3, r2
 8006066:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006068:	68bb      	ldr	r3, [r7, #8]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006076:	b480      	push	{r7}
 8006078:	b087      	sub	sp, #28
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006098:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800609a:	78fb      	ldrb	r3, [r7, #3]
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	fa22 f303 	lsr.w	r3, r2, r3
 80060a6:	01db      	lsls	r3, r3, #7
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4013      	ands	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060c4:	68bb      	ldr	r3, [r7, #8]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f003 0301 	and.w	r3, r3, #1
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006108:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800610c:	f023 0307 	bic.w	r3, r3, #7
 8006110:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006124:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	460b      	mov	r3, r1
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	333c      	adds	r3, #60	; 0x3c
 800614a:	3304      	adds	r3, #4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4a26      	ldr	r2, [pc, #152]	; (80061ec <USB_EP0_OutStart+0xb8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d90a      	bls.n	800616e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006168:	d101      	bne.n	800616e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	e037      	b.n	80061de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006174:	461a      	mov	r2, r3
 8006176:	2300      	movs	r3, #0
 8006178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800618c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619c:	f043 0318 	orr.w	r3, r3, #24
 80061a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80061b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80061b6:	7afb      	ldrb	r3, [r7, #11]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d10f      	bne.n	80061dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	461a      	mov	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80061da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	4f54300a 	.word	0x4f54300a

080061f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3301      	adds	r3, #1
 8006200:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4a13      	ldr	r2, [pc, #76]	; (8006254 <USB_CoreReset+0x64>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d901      	bls.n	800620e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e01b      	b.n	8006246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	daf2      	bge.n	80061fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f043 0201 	orr.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <USB_CoreReset+0x64>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d901      	bls.n	8006238 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e006      	b.n	8006246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	d0f0      	beq.n	8006226 <USB_CoreReset+0x36>

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	00030d40 	.word	0x00030d40

08006258 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006264:	2010      	movs	r0, #16
 8006266:	f002 f929 	bl	80084bc <USBD_static_malloc>
 800626a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	32b0      	adds	r2, #176	; 0xb0
 800627c:	2100      	movs	r1, #0
 800627e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006282:	2302      	movs	r3, #2
 8006284:	e048      	b.n	8006318 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	32b0      	adds	r2, #176	; 0xb0
 8006290:	68f9      	ldr	r1, [r7, #12]
 8006292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	32b0      	adds	r2, #176	; 0xb0
 80062a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	7c1b      	ldrb	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10d      	bne.n	80062ce <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80062b2:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <USBD_HID_Init+0xc8>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	f003 020f 	and.w	r2, r3, #15
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	3326      	adds	r3, #38	; 0x26
 80062c8:	2207      	movs	r2, #7
 80062ca:	801a      	strh	r2, [r3, #0]
 80062cc:	e00c      	b.n	80062e8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80062ce:	4b14      	ldr	r3, [pc, #80]	; (8006320 <USBD_HID_Init+0xc8>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f003 020f 	and.w	r2, r3, #15
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	3326      	adds	r3, #38	; 0x26
 80062e4:	220a      	movs	r2, #10
 80062e6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80062e8:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <USBD_HID_Init+0xc8>)
 80062ea:	7819      	ldrb	r1, [r3, #0]
 80062ec:	2304      	movs	r3, #4
 80062ee:	2203      	movs	r2, #3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 ffd2 	bl	800829a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80062f6:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <USBD_HID_Init+0xc8>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	f003 020f 	and.w	r2, r3, #15
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	3324      	adds	r3, #36	; 0x24
 800630c:	2201      	movs	r2, #1
 800630e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	200000d2 	.word	0x200000d2

08006324 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006330:	4b1f      	ldr	r3, [pc, #124]	; (80063b0 <USBD_HID_DeInit+0x8c>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 ffd5 	bl	80082e6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800633c:	4b1c      	ldr	r3, [pc, #112]	; (80063b0 <USBD_HID_DeInit+0x8c>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	f003 020f 	and.w	r2, r3, #15
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	440b      	add	r3, r1
 8006350:	3324      	adds	r3, #36	; 0x24
 8006352:	2200      	movs	r2, #0
 8006354:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8006356:	4b16      	ldr	r3, [pc, #88]	; (80063b0 <USBD_HID_DeInit+0x8c>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f003 020f 	and.w	r2, r3, #15
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	3326      	adds	r3, #38	; 0x26
 800636c:	2200      	movs	r2, #0
 800636e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	32b0      	adds	r2, #176	; 0xb0
 800637a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d011      	beq.n	80063a6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	32b0      	adds	r2, #176	; 0xb0
 800638c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006390:	4618      	mov	r0, r3
 8006392:	f002 f8a1 	bl	80084d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	32b0      	adds	r2, #176	; 0xb0
 80063a0:	2100      	movs	r1, #0
 80063a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	200000d2 	.word	0x200000d2

080063b4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	32b0      	adds	r2, #176	; 0xb0
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	e0e8      	b.n	80065b2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d046      	beq.n	800647a <USBD_HID_Setup+0xc6>
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	f040 80d8 	bne.w	80065a2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	3b02      	subs	r3, #2
 80063f8:	2b09      	cmp	r3, #9
 80063fa:	d836      	bhi.n	800646a <USBD_HID_Setup+0xb6>
 80063fc:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <USBD_HID_Setup+0x50>)
 80063fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006402:	bf00      	nop
 8006404:	0800645b 	.word	0x0800645b
 8006408:	0800643b 	.word	0x0800643b
 800640c:	0800646b 	.word	0x0800646b
 8006410:	0800646b 	.word	0x0800646b
 8006414:	0800646b 	.word	0x0800646b
 8006418:	0800646b 	.word	0x0800646b
 800641c:	0800646b 	.word	0x0800646b
 8006420:	0800646b 	.word	0x0800646b
 8006424:	08006449 	.word	0x08006449
 8006428:	0800642d 	.word	0x0800642d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	885b      	ldrh	r3, [r3, #2]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	601a      	str	r2, [r3, #0]
          break;
 8006438:	e01e      	b.n	8006478 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fbd5 	bl	8007bf0 <USBD_CtlSendData>
          break;
 8006446:	e017      	b.n	8006478 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	885b      	ldrh	r3, [r3, #2]
 800644c:	0a1b      	lsrs	r3, r3, #8
 800644e:	b29b      	uxth	r3, r3
 8006450:	b2db      	uxtb	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	605a      	str	r2, [r3, #4]
          break;
 8006458:	e00e      	b.n	8006478 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3304      	adds	r3, #4
 800645e:	2201      	movs	r2, #1
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 fbc4 	bl	8007bf0 <USBD_CtlSendData>
          break;
 8006468:	e006      	b.n	8006478 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fb4e 	bl	8007b0e <USBD_CtlError>
          ret = USBD_FAIL;
 8006472:	2303      	movs	r3, #3
 8006474:	75fb      	strb	r3, [r7, #23]
          break;
 8006476:	bf00      	nop
      }
      break;
 8006478:	e09a      	b.n	80065b0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	2b0b      	cmp	r3, #11
 8006480:	f200 8086 	bhi.w	8006590 <USBD_HID_Setup+0x1dc>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <USBD_HID_Setup+0xd8>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064bd 	.word	0x080064bd
 8006490:	0800659f 	.word	0x0800659f
 8006494:	08006591 	.word	0x08006591
 8006498:	08006591 	.word	0x08006591
 800649c:	08006591 	.word	0x08006591
 80064a0:	08006591 	.word	0x08006591
 80064a4:	080064e7 	.word	0x080064e7
 80064a8:	08006591 	.word	0x08006591
 80064ac:	08006591 	.word	0x08006591
 80064b0:	08006591 	.word	0x08006591
 80064b4:	0800653f 	.word	0x0800653f
 80064b8:	08006569 	.word	0x08006569
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d107      	bne.n	80064d8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80064c8:	f107 030a 	add.w	r3, r7, #10
 80064cc:	2202      	movs	r2, #2
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 fb8d 	bl	8007bf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064d6:	e063      	b.n	80065a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 fb17 	bl	8007b0e <USBD_CtlError>
            ret = USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	75fb      	strb	r3, [r7, #23]
          break;
 80064e4:	e05c      	b.n	80065a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	885b      	ldrh	r3, [r3, #2]
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b22      	cmp	r3, #34	; 0x22
 80064f0:	d108      	bne.n	8006504 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	88db      	ldrh	r3, [r3, #6]
 80064f6:	2b4a      	cmp	r3, #74	; 0x4a
 80064f8:	bf28      	it	cs
 80064fa:	234a      	movcs	r3, #74	; 0x4a
 80064fc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80064fe:	4b2f      	ldr	r3, [pc, #188]	; (80065bc <USBD_HID_Setup+0x208>)
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	e015      	b.n	8006530 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	885b      	ldrh	r3, [r3, #2]
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b21      	cmp	r3, #33	; 0x21
 800650e:	d108      	bne.n	8006522 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006510:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <USBD_HID_Setup+0x20c>)
 8006512:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	88db      	ldrh	r3, [r3, #6]
 8006518:	2b09      	cmp	r3, #9
 800651a:	bf28      	it	cs
 800651c:	2309      	movcs	r3, #9
 800651e:	82bb      	strh	r3, [r7, #20]
 8006520:	e006      	b.n	8006530 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 faf2 	bl	8007b0e <USBD_CtlError>
            ret = USBD_FAIL;
 800652a:	2303      	movs	r3, #3
 800652c:	75fb      	strb	r3, [r7, #23]
            break;
 800652e:	e037      	b.n	80065a0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006530:	8abb      	ldrh	r3, [r7, #20]
 8006532:	461a      	mov	r2, r3
 8006534:	6939      	ldr	r1, [r7, #16]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fb5a 	bl	8007bf0 <USBD_CtlSendData>
          break;
 800653c:	e030      	b.n	80065a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b03      	cmp	r3, #3
 8006548:	d107      	bne.n	800655a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3308      	adds	r3, #8
 800654e:	2201      	movs	r2, #1
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 fb4c 	bl	8007bf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006558:	e022      	b.n	80065a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 fad6 	bl	8007b0e <USBD_CtlError>
            ret = USBD_FAIL;
 8006562:	2303      	movs	r3, #3
 8006564:	75fb      	strb	r3, [r7, #23]
          break;
 8006566:	e01b      	b.n	80065a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b03      	cmp	r3, #3
 8006572:	d106      	bne.n	8006582 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	885b      	ldrh	r3, [r3, #2]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006580:	e00e      	b.n	80065a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 fac2 	bl	8007b0e <USBD_CtlError>
            ret = USBD_FAIL;
 800658a:	2303      	movs	r3, #3
 800658c:	75fb      	strb	r3, [r7, #23]
          break;
 800658e:	e007      	b.n	80065a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f001 fabb 	bl	8007b0e <USBD_CtlError>
          ret = USBD_FAIL;
 8006598:	2303      	movs	r3, #3
 800659a:	75fb      	strb	r3, [r7, #23]
          break;
 800659c:	e000      	b.n	80065a0 <USBD_HID_Setup+0x1ec>
          break;
 800659e:	bf00      	nop
      }
      break;
 80065a0:	e006      	b.n	80065b0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 fab2 	bl	8007b0e <USBD_CtlError>
      ret = USBD_FAIL;
 80065aa:	2303      	movs	r3, #3
 80065ac:	75fb      	strb	r3, [r7, #23]
      break;
 80065ae:	bf00      	nop
  }

  return (uint8_t)ret;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000088 	.word	0x20000088
 80065c0:	20000070 	.word	0x20000070

080065c4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	32b0      	adds	r2, #176	; 0xb0
 80065dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e014      	b.n	8006616 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d10d      	bne.n	8006614 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	7b1b      	ldrb	r3, [r3, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2201      	movs	r2, #1
 8006604:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8006606:	4b06      	ldr	r3, [pc, #24]	; (8006620 <USBD_HID_SendReport+0x5c>)
 8006608:	7819      	ldrb	r1, [r3, #0]
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f001 ff11 	bl	8008436 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	200000d2 	.word	0x200000d2

08006624 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800662c:	2181      	movs	r1, #129	; 0x81
 800662e:	4809      	ldr	r0, [pc, #36]	; (8006654 <USBD_HID_GetFSCfgDesc+0x30>)
 8006630:	f000 fc35 	bl	8006e9e <USBD_GetEpDesc>
 8006634:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	220a      	movs	r2, #10
 8006640:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2222      	movs	r2, #34	; 0x22
 8006646:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006648:	4b02      	ldr	r3, [pc, #8]	; (8006654 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	2000004c 	.word	0x2000004c

08006658 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006660:	2181      	movs	r1, #129	; 0x81
 8006662:	4809      	ldr	r0, [pc, #36]	; (8006688 <USBD_HID_GetHSCfgDesc+0x30>)
 8006664:	f000 fc1b 	bl	8006e9e <USBD_GetEpDesc>
 8006668:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2207      	movs	r2, #7
 8006674:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2222      	movs	r2, #34	; 0x22
 800667a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800667c:	4b02      	ldr	r3, [pc, #8]	; (8006688 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	2000004c 	.word	0x2000004c

0800668c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006694:	2181      	movs	r1, #129	; 0x81
 8006696:	4809      	ldr	r0, [pc, #36]	; (80066bc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006698:	f000 fc01 	bl	8006e9e <USBD_GetEpDesc>
 800669c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	220a      	movs	r2, #10
 80066a8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2222      	movs	r2, #34	; 0x22
 80066ae:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80066b0:	4b02      	ldr	r3, [pc, #8]	; (80066bc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	2000004c 	.word	0x2000004c

080066c0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	32b0      	adds	r2, #176	; 0xb0
 80066d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066da:	2200      	movs	r2, #0
 80066dc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	220a      	movs	r2, #10
 80066f8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	2000007c 	.word	0x2000007c

0800670c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	4613      	mov	r3, r2
 8006718:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006720:	2303      	movs	r3, #3
 8006722:	e01f      	b.n	8006764 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	79fa      	ldrb	r2, [r7, #7]
 8006756:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f001 fd37 	bl	80081cc <USBD_LL_Init>
 800675e:	4603      	mov	r3, r0
 8006760:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006762:	7dfb      	ldrb	r3, [r7, #23]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006780:	2303      	movs	r3, #3
 8006782:	e025      	b.n	80067d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	32ae      	adds	r2, #174	; 0xae
 8006796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00f      	beq.n	80067c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	32ae      	adds	r2, #174	; 0xae
 80067aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	f107 020e 	add.w	r2, r7, #14
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	4602      	mov	r2, r0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 fd3f 	bl	8008264 <USBD_LL_Start>
 80067e6:	4603      	mov	r3, r0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d009      	beq.n	8006834 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	78fa      	ldrb	r2, [r7, #3]
 800682a:	4611      	mov	r1, r2
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	4798      	blx	r3
 8006830:	4603      	mov	r3, r0
 8006832:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006834:	7bfb      	ldrb	r3, [r7, #15]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	460b      	mov	r3, r1
 8006848:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	78fa      	ldrb	r2, [r7, #3]
 8006858:	4611      	mov	r1, r2
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006864:	2303      	movs	r3, #3
 8006866:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f001 f908 	bl	8007a9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068a6:	f003 031f 	and.w	r3, r3, #31
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d01a      	beq.n	80068e4 <USBD_LL_SetupStage+0x72>
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d822      	bhi.n	80068f8 <USBD_LL_SetupStage+0x86>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <USBD_LL_SetupStage+0x4a>
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d00a      	beq.n	80068d0 <USBD_LL_SetupStage+0x5e>
 80068ba:	e01d      	b.n	80068f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fb5f 	bl	8006f88 <USBD_StdDevReq>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73fb      	strb	r3, [r7, #15]
      break;
 80068ce:	e020      	b.n	8006912 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fbc7 	bl	800706c <USBD_StdItfReq>
 80068de:	4603      	mov	r3, r0
 80068e0:	73fb      	strb	r3, [r7, #15]
      break;
 80068e2:	e016      	b.n	8006912 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fc29 	bl	8007144 <USBD_StdEPReq>
 80068f2:	4603      	mov	r3, r0
 80068f4:	73fb      	strb	r3, [r7, #15]
      break;
 80068f6:	e00c      	b.n	8006912 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006902:	b2db      	uxtb	r3, r3
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 fd0c 	bl	8008324 <USBD_LL_StallEP>
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]
      break;
 8006910:	bf00      	nop
  }

  return ret;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	460b      	mov	r3, r1
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d16e      	bne.n	8006a12 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800693a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006942:	2b03      	cmp	r3, #3
 8006944:	f040 8098 	bne.w	8006a78 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	429a      	cmp	r2, r3
 8006952:	d913      	bls.n	800697c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	1ad2      	subs	r2, r2, r3
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	4293      	cmp	r3, r2
 800696c:	bf28      	it	cs
 800696e:	4613      	movcs	r3, r2
 8006970:	461a      	mov	r2, r3
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f001 f967 	bl	8007c48 <USBD_CtlContinueRx>
 800697a:	e07d      	b.n	8006a78 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	2b02      	cmp	r3, #2
 8006988:	d014      	beq.n	80069b4 <USBD_LL_DataOutStage+0x98>
 800698a:	2b02      	cmp	r3, #2
 800698c:	d81d      	bhi.n	80069ca <USBD_LL_DataOutStage+0xae>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <USBD_LL_DataOutStage+0x7c>
 8006992:	2b01      	cmp	r3, #1
 8006994:	d003      	beq.n	800699e <USBD_LL_DataOutStage+0x82>
 8006996:	e018      	b.n	80069ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	75bb      	strb	r3, [r7, #22]
            break;
 800699c:	e018      	b.n	80069d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	4619      	mov	r1, r3
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fa5e 	bl	8006e6a <USBD_CoreFindIF>
 80069ae:	4603      	mov	r3, r0
 80069b0:	75bb      	strb	r3, [r7, #22]
            break;
 80069b2:	e00d      	b.n	80069d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	4619      	mov	r1, r3
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fa60 	bl	8006e84 <USBD_CoreFindEP>
 80069c4:	4603      	mov	r3, r0
 80069c6:	75bb      	strb	r3, [r7, #22]
            break;
 80069c8:	e002      	b.n	80069d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	75bb      	strb	r3, [r7, #22]
            break;
 80069ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80069d0:	7dbb      	ldrb	r3, [r7, #22]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d119      	bne.n	8006a0a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d113      	bne.n	8006a0a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80069e2:	7dba      	ldrb	r2, [r7, #22]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	32ae      	adds	r2, #174	; 0xae
 80069e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00b      	beq.n	8006a0a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80069f2:	7dba      	ldrb	r2, [r7, #22]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80069fa:	7dba      	ldrb	r2, [r7, #22]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	32ae      	adds	r2, #174	; 0xae
 8006a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f001 f92d 	bl	8007c6a <USBD_CtlSendStatus>
 8006a10:	e032      	b.n	8006a78 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a12:	7afb      	ldrb	r3, [r7, #11]
 8006a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 fa31 	bl	8006e84 <USBD_CoreFindEP>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a26:	7dbb      	ldrb	r3, [r7, #22]
 8006a28:	2bff      	cmp	r3, #255	; 0xff
 8006a2a:	d025      	beq.n	8006a78 <USBD_LL_DataOutStage+0x15c>
 8006a2c:	7dbb      	ldrb	r3, [r7, #22]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d122      	bne.n	8006a78 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d117      	bne.n	8006a6e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a3e:	7dba      	ldrb	r2, [r7, #22]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	32ae      	adds	r2, #174	; 0xae
 8006a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00f      	beq.n	8006a6e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a4e:	7dba      	ldrb	r2, [r7, #22]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a56:	7dba      	ldrb	r2, [r7, #22]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	32ae      	adds	r2, #174	; 0xae
 8006a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	7afa      	ldrb	r2, [r7, #11]
 8006a64:	4611      	mov	r1, r2
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	4798      	blx	r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
 8006a76:	e000      	b.n	8006a7a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	607a      	str	r2, [r7, #4]
 8006a8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006a90:	7afb      	ldrb	r3, [r7, #11]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d16f      	bne.n	8006b76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3314      	adds	r3, #20
 8006a9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d15a      	bne.n	8006b5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d914      	bls.n	8006adc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f001 f8ac 	bl	8007c26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ace:	2300      	movs	r3, #0
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f001 fccf 	bl	8008478 <USBD_LL_PrepareReceive>
 8006ada:	e03f      	b.n	8006b5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d11c      	bne.n	8006b22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d316      	bcc.n	8006b22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d20f      	bcs.n	8006b22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b02:	2200      	movs	r2, #0
 8006b04:	2100      	movs	r1, #0
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f001 f88d 	bl	8007c26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b14:	2300      	movs	r3, #0
 8006b16:	2200      	movs	r2, #0
 8006b18:	2100      	movs	r1, #0
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f001 fcac 	bl	8008478 <USBD_LL_PrepareReceive>
 8006b20:	e01c      	b.n	8006b5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d10f      	bne.n	8006b4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d009      	beq.n	8006b4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b4e:	2180      	movs	r1, #128	; 0x80
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f001 fbe7 	bl	8008324 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f001 f89a 	bl	8007c90 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d03a      	beq.n	8006bdc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff fe42 	bl	80067f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b74:	e032      	b.n	8006bdc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b76:	7afb      	ldrb	r3, [r7, #11]
 8006b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	4619      	mov	r1, r3
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f97f 	bl	8006e84 <USBD_CoreFindEP>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	2bff      	cmp	r3, #255	; 0xff
 8006b8e:	d025      	beq.n	8006bdc <USBD_LL_DataInStage+0x15a>
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d122      	bne.n	8006bdc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d11c      	bne.n	8006bdc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ba2:	7dfa      	ldrb	r2, [r7, #23]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	32ae      	adds	r2, #174	; 0xae
 8006ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d014      	beq.n	8006bdc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bb2:	7dfa      	ldrb	r2, [r7, #23]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bba:	7dfa      	ldrb	r2, [r7, #23]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	32ae      	adds	r2, #174	; 0xae
 8006bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	7afa      	ldrb	r2, [r7, #11]
 8006bc8:	4611      	mov	r1, r2
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	4798      	blx	r3
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006bd2:	7dbb      	ldrb	r3, [r7, #22]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006bd8:	7dbb      	ldrb	r3, [r7, #22]
 8006bda:	e000      	b.n	8006bde <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d014      	beq.n	8006c4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00e      	beq.n	8006c4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	6852      	ldr	r2, [r2, #4]
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	4798      	blx	r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c4c:	2340      	movs	r3, #64	; 0x40
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2100      	movs	r1, #0
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 fb21 	bl	800829a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2240      	movs	r2, #64	; 0x40
 8006c64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c68:	2340      	movs	r3, #64	; 0x40
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2180      	movs	r1, #128	; 0x80
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 fb13 	bl	800829a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2240      	movs	r2, #64	; 0x40
 8006c7e:	621a      	str	r2, [r3, #32]

  return ret;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	460b      	mov	r3, r1
 8006c94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	78fa      	ldrb	r2, [r7, #3]
 8006c9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2204      	movs	r2, #4
 8006cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d106      	bne.n	8006cf8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d110      	bne.n	8006d3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	32ae      	adds	r2, #174	; 0xae
 8006d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e01c      	b.n	8006da2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d115      	bne.n	8006da0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	32ae      	adds	r2, #174	; 0xae
 8006d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	32ae      	adds	r2, #174	; 0xae
 8006d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	78fa      	ldrb	r2, [r7, #3]
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	32ae      	adds	r2, #174	; 0xae
 8006dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e01c      	b.n	8006e06 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d115      	bne.n	8006e04 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	32ae      	adds	r2, #174	; 0xae
 8006de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00b      	beq.n	8006e04 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	32ae      	adds	r2, #174	; 0xae
 8006df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	78fa      	ldrb	r2, [r7, #3]
 8006dfe:	4611      	mov	r1, r2
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00e      	beq.n	8006e60 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	6852      	ldr	r2, [r2, #4]
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	4611      	mov	r1, r2
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b086      	sub	sp, #24
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	885b      	ldrh	r3, [r3, #2]
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d920      	bls.n	8006f08 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006ece:	e013      	b.n	8006ef8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006ed0:	f107 030a 	add.w	r3, r7, #10
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6978      	ldr	r0, [r7, #20]
 8006ed8:	f000 f81b 	bl	8006f12 <USBD_GetNextDesc>
 8006edc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b05      	cmp	r3, #5
 8006ee4:	d108      	bne.n	8006ef8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	789b      	ldrb	r3, [r3, #2]
 8006eee:	78fa      	ldrb	r2, [r7, #3]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d008      	beq.n	8006f06 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	885b      	ldrh	r3, [r3, #2]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	897b      	ldrh	r3, [r7, #10]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d8e5      	bhi.n	8006ed0 <USBD_GetEpDesc+0x32>
 8006f04:	e000      	b.n	8006f08 <USBD_GetEpDesc+0x6a>
          break;
 8006f06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f08:	693b      	ldr	r3, [r7, #16]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	881a      	ldrh	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	4413      	add	r3, r2
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	3301      	adds	r3, #1
 8006f62:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f6a:	8a3b      	ldrh	r3, [r7, #16]
 8006f6c:	021b      	lsls	r3, r3, #8
 8006f6e:	b21a      	sxth	r2, r3
 8006f70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	b21b      	sxth	r3, r3
 8006f78:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f7a:	89fb      	ldrh	r3, [r7, #14]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f9e:	2b40      	cmp	r3, #64	; 0x40
 8006fa0:	d005      	beq.n	8006fae <USBD_StdDevReq+0x26>
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d857      	bhi.n	8007056 <USBD_StdDevReq+0xce>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00f      	beq.n	8006fca <USBD_StdDevReq+0x42>
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d153      	bne.n	8007056 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	32ae      	adds	r2, #174	; 0xae
 8006fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	4798      	blx	r3
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc8:	e04a      	b.n	8007060 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	785b      	ldrb	r3, [r3, #1]
 8006fce:	2b09      	cmp	r3, #9
 8006fd0:	d83b      	bhi.n	800704a <USBD_StdDevReq+0xc2>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <USBD_StdDevReq+0x50>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	0800702d 	.word	0x0800702d
 8006fdc:	08007041 	.word	0x08007041
 8006fe0:	0800704b 	.word	0x0800704b
 8006fe4:	08007037 	.word	0x08007037
 8006fe8:	0800704b 	.word	0x0800704b
 8006fec:	0800700b 	.word	0x0800700b
 8006ff0:	08007001 	.word	0x08007001
 8006ff4:	0800704b 	.word	0x0800704b
 8006ff8:	08007023 	.word	0x08007023
 8006ffc:	08007015 	.word	0x08007015
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa3c 	bl	8007480 <USBD_GetDescriptor>
          break;
 8007008:	e024      	b.n	8007054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fba1 	bl	8007754 <USBD_SetAddress>
          break;
 8007012:	e01f      	b.n	8007054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fbe0 	bl	80077dc <USBD_SetConfig>
 800701c:	4603      	mov	r3, r0
 800701e:	73fb      	strb	r3, [r7, #15]
          break;
 8007020:	e018      	b.n	8007054 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fc83 	bl	8007930 <USBD_GetConfig>
          break;
 800702a:	e013      	b.n	8007054 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fcb4 	bl	800799c <USBD_GetStatus>
          break;
 8007034:	e00e      	b.n	8007054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fce3 	bl	8007a04 <USBD_SetFeature>
          break;
 800703e:	e009      	b.n	8007054 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fd07 	bl	8007a56 <USBD_ClrFeature>
          break;
 8007048:	e004      	b.n	8007054 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fd5e 	bl	8007b0e <USBD_CtlError>
          break;
 8007052:	bf00      	nop
      }
      break;
 8007054:	e004      	b.n	8007060 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fd58 	bl	8007b0e <USBD_CtlError>
      break;
 800705e:	bf00      	nop
  }

  return ret;
 8007060:	7bfb      	ldrb	r3, [r7, #15]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop

0800706c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007082:	2b40      	cmp	r3, #64	; 0x40
 8007084:	d005      	beq.n	8007092 <USBD_StdItfReq+0x26>
 8007086:	2b40      	cmp	r3, #64	; 0x40
 8007088:	d852      	bhi.n	8007130 <USBD_StdItfReq+0xc4>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <USBD_StdItfReq+0x26>
 800708e:	2b20      	cmp	r3, #32
 8007090:	d14e      	bne.n	8007130 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007098:	b2db      	uxtb	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	2b02      	cmp	r3, #2
 800709e:	d840      	bhi.n	8007122 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	889b      	ldrh	r3, [r3, #4]
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d836      	bhi.n	8007118 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	889b      	ldrh	r3, [r3, #4]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fed9 	bl	8006e6a <USBD_CoreFindIF>
 80070b8:	4603      	mov	r3, r0
 80070ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	2bff      	cmp	r3, #255	; 0xff
 80070c0:	d01d      	beq.n	80070fe <USBD_StdItfReq+0x92>
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d11a      	bne.n	80070fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80070c8:	7bba      	ldrb	r2, [r7, #14]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	32ae      	adds	r2, #174	; 0xae
 80070ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00f      	beq.n	80070f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80070d8:	7bba      	ldrb	r2, [r7, #14]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070e0:	7bba      	ldrb	r2, [r7, #14]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	32ae      	adds	r2, #174	; 0xae
 80070e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	4798      	blx	r3
 80070f2:	4603      	mov	r3, r0
 80070f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070f6:	e004      	b.n	8007102 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80070f8:	2303      	movs	r3, #3
 80070fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070fc:	e001      	b.n	8007102 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80070fe:	2303      	movs	r3, #3
 8007100:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	88db      	ldrh	r3, [r3, #6]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d110      	bne.n	800712c <USBD_StdItfReq+0xc0>
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10d      	bne.n	800712c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fdaa 	bl	8007c6a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007116:	e009      	b.n	800712c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fcf7 	bl	8007b0e <USBD_CtlError>
          break;
 8007120:	e004      	b.n	800712c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fcf2 	bl	8007b0e <USBD_CtlError>
          break;
 800712a:	e000      	b.n	800712e <USBD_StdItfReq+0xc2>
          break;
 800712c:	bf00      	nop
      }
      break;
 800712e:	e004      	b.n	800713a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fceb 	bl	8007b0e <USBD_CtlError>
      break;
 8007138:	bf00      	nop
  }

  return ret;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	889b      	ldrh	r3, [r3, #4]
 8007156:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007160:	2b40      	cmp	r3, #64	; 0x40
 8007162:	d007      	beq.n	8007174 <USBD_StdEPReq+0x30>
 8007164:	2b40      	cmp	r3, #64	; 0x40
 8007166:	f200 817f 	bhi.w	8007468 <USBD_StdEPReq+0x324>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d02a      	beq.n	80071c4 <USBD_StdEPReq+0x80>
 800716e:	2b20      	cmp	r3, #32
 8007170:	f040 817a 	bne.w	8007468 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff fe83 	bl	8006e84 <USBD_CoreFindEP>
 800717e:	4603      	mov	r3, r0
 8007180:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007182:	7b7b      	ldrb	r3, [r7, #13]
 8007184:	2bff      	cmp	r3, #255	; 0xff
 8007186:	f000 8174 	beq.w	8007472 <USBD_StdEPReq+0x32e>
 800718a:	7b7b      	ldrb	r3, [r7, #13]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f040 8170 	bne.w	8007472 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007192:	7b7a      	ldrb	r2, [r7, #13]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800719a:	7b7a      	ldrb	r2, [r7, #13]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	32ae      	adds	r2, #174	; 0xae
 80071a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 8163 	beq.w	8007472 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071ac:	7b7a      	ldrb	r2, [r7, #13]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	32ae      	adds	r2, #174	; 0xae
 80071b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071c2:	e156      	b.n	8007472 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d008      	beq.n	80071de <USBD_StdEPReq+0x9a>
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	f300 8145 	bgt.w	800745c <USBD_StdEPReq+0x318>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 809b 	beq.w	800730e <USBD_StdEPReq+0x1ca>
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d03c      	beq.n	8007256 <USBD_StdEPReq+0x112>
 80071dc:	e13e      	b.n	800745c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d002      	beq.n	80071f0 <USBD_StdEPReq+0xac>
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d016      	beq.n	800721c <USBD_StdEPReq+0xd8>
 80071ee:	e02c      	b.n	800724a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00d      	beq.n	8007212 <USBD_StdEPReq+0xce>
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	2b80      	cmp	r3, #128	; 0x80
 80071fa:	d00a      	beq.n	8007212 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 f88f 	bl	8008324 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007206:	2180      	movs	r1, #128	; 0x80
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f88b 	bl	8008324 <USBD_LL_StallEP>
 800720e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007210:	e020      	b.n	8007254 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fc7a 	bl	8007b0e <USBD_CtlError>
              break;
 800721a:	e01b      	b.n	8007254 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	885b      	ldrh	r3, [r3, #2]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10e      	bne.n	8007242 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00b      	beq.n	8007242 <USBD_StdEPReq+0xfe>
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b80      	cmp	r3, #128	; 0x80
 800722e:	d008      	beq.n	8007242 <USBD_StdEPReq+0xfe>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	88db      	ldrh	r3, [r3, #6]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 f871 	bl	8008324 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fd11 	bl	8007c6a <USBD_CtlSendStatus>

              break;
 8007248:	e004      	b.n	8007254 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fc5e 	bl	8007b0e <USBD_CtlError>
              break;
 8007252:	bf00      	nop
          }
          break;
 8007254:	e107      	b.n	8007466 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d002      	beq.n	8007268 <USBD_StdEPReq+0x124>
 8007262:	2b03      	cmp	r3, #3
 8007264:	d016      	beq.n	8007294 <USBD_StdEPReq+0x150>
 8007266:	e04b      	b.n	8007300 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00d      	beq.n	800728a <USBD_StdEPReq+0x146>
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	2b80      	cmp	r3, #128	; 0x80
 8007272:	d00a      	beq.n	800728a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f853 	bl	8008324 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800727e:	2180      	movs	r1, #128	; 0x80
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 f84f 	bl	8008324 <USBD_LL_StallEP>
 8007286:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007288:	e040      	b.n	800730c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fc3e 	bl	8007b0e <USBD_CtlError>
              break;
 8007292:	e03b      	b.n	800730c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	885b      	ldrh	r3, [r3, #2]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d136      	bne.n	800730a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d004      	beq.n	80072b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 f859 	bl	8008362 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fcda 	bl	8007c6a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff fde2 	bl	8006e84 <USBD_CoreFindEP>
 80072c0:	4603      	mov	r3, r0
 80072c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072c4:	7b7b      	ldrb	r3, [r7, #13]
 80072c6:	2bff      	cmp	r3, #255	; 0xff
 80072c8:	d01f      	beq.n	800730a <USBD_StdEPReq+0x1c6>
 80072ca:	7b7b      	ldrb	r3, [r7, #13]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d11c      	bne.n	800730a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80072d0:	7b7a      	ldrb	r2, [r7, #13]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80072d8:	7b7a      	ldrb	r2, [r7, #13]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	32ae      	adds	r2, #174	; 0xae
 80072de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d010      	beq.n	800730a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072e8:	7b7a      	ldrb	r2, [r7, #13]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	32ae      	adds	r2, #174	; 0xae
 80072ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	4798      	blx	r3
 80072fa:	4603      	mov	r3, r0
 80072fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80072fe:	e004      	b.n	800730a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fc03 	bl	8007b0e <USBD_CtlError>
              break;
 8007308:	e000      	b.n	800730c <USBD_StdEPReq+0x1c8>
              break;
 800730a:	bf00      	nop
          }
          break;
 800730c:	e0ab      	b.n	8007466 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d002      	beq.n	8007320 <USBD_StdEPReq+0x1dc>
 800731a:	2b03      	cmp	r3, #3
 800731c:	d032      	beq.n	8007384 <USBD_StdEPReq+0x240>
 800731e:	e097      	b.n	8007450 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <USBD_StdEPReq+0x1f2>
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	2b80      	cmp	r3, #128	; 0x80
 800732a:	d004      	beq.n	8007336 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fbed 	bl	8007b0e <USBD_CtlError>
                break;
 8007334:	e091      	b.n	800745a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800733a:	2b00      	cmp	r3, #0
 800733c:	da0b      	bge.n	8007356 <USBD_StdEPReq+0x212>
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	3310      	adds	r3, #16
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	4413      	add	r3, r2
 8007352:	3304      	adds	r3, #4
 8007354:	e00b      	b.n	800736e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800735c:	4613      	mov	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	3304      	adds	r3, #4
 800736e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2202      	movs	r2, #2
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fc37 	bl	8007bf0 <USBD_CtlSendData>
              break;
 8007382:	e06a      	b.n	800745a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007388:	2b00      	cmp	r3, #0
 800738a:	da11      	bge.n	80073b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	f003 020f 	and.w	r2, r3, #15
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	3324      	adds	r3, #36	; 0x24
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d117      	bne.n	80073d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fbb0 	bl	8007b0e <USBD_CtlError>
                  break;
 80073ae:	e054      	b.n	800745a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	f003 020f 	and.w	r2, r3, #15
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	4613      	mov	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fb9d 	bl	8007b0e <USBD_CtlError>
                  break;
 80073d4:	e041      	b.n	800745a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da0b      	bge.n	80073f6 <USBD_StdEPReq+0x2b2>
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	3310      	adds	r3, #16
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	4413      	add	r3, r2
 80073f2:	3304      	adds	r3, #4
 80073f4:	e00b      	b.n	800740e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	4413      	add	r3, r2
 800740c:	3304      	adds	r3, #4
 800740e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <USBD_StdEPReq+0x2d8>
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b80      	cmp	r3, #128	; 0x80
 800741a:	d103      	bne.n	8007424 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	e00e      	b.n	8007442 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 ffb9 	bl	80083a0 <USBD_LL_IsStallEP>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2201      	movs	r2, #1
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	e002      	b.n	8007442 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2202      	movs	r2, #2
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fbd1 	bl	8007bf0 <USBD_CtlSendData>
              break;
 800744e:	e004      	b.n	800745a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fb5b 	bl	8007b0e <USBD_CtlError>
              break;
 8007458:	bf00      	nop
          }
          break;
 800745a:	e004      	b.n	8007466 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fb55 	bl	8007b0e <USBD_CtlError>
          break;
 8007464:	bf00      	nop
      }
      break;
 8007466:	e005      	b.n	8007474 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fb4f 	bl	8007b0e <USBD_CtlError>
      break;
 8007470:	e000      	b.n	8007474 <USBD_StdEPReq+0x330>
      break;
 8007472:	bf00      	nop
  }

  return ret;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	885b      	ldrh	r3, [r3, #2]
 800749a:	0a1b      	lsrs	r3, r3, #8
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	2b06      	cmp	r3, #6
 80074a2:	f200 8128 	bhi.w	80076f6 <USBD_GetDescriptor+0x276>
 80074a6:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <USBD_GetDescriptor+0x2c>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	080074c9 	.word	0x080074c9
 80074b0:	080074e1 	.word	0x080074e1
 80074b4:	08007521 	.word	0x08007521
 80074b8:	080076f7 	.word	0x080076f7
 80074bc:	080076f7 	.word	0x080076f7
 80074c0:	08007697 	.word	0x08007697
 80074c4:	080076c3 	.word	0x080076c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	7c12      	ldrb	r2, [r2, #16]
 80074d4:	f107 0108 	add.w	r1, r7, #8
 80074d8:	4610      	mov	r0, r2
 80074da:	4798      	blx	r3
 80074dc:	60f8      	str	r0, [r7, #12]
      break;
 80074de:	e112      	b.n	8007706 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	7c1b      	ldrb	r3, [r3, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10d      	bne.n	8007504 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	f107 0208 	add.w	r2, r7, #8
 80074f4:	4610      	mov	r0, r2
 80074f6:	4798      	blx	r3
 80074f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3301      	adds	r3, #1
 80074fe:	2202      	movs	r2, #2
 8007500:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007502:	e100      	b.n	8007706 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	f107 0208 	add.w	r2, r7, #8
 8007510:	4610      	mov	r0, r2
 8007512:	4798      	blx	r3
 8007514:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3301      	adds	r3, #1
 800751a:	2202      	movs	r2, #2
 800751c:	701a      	strb	r2, [r3, #0]
      break;
 800751e:	e0f2      	b.n	8007706 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	885b      	ldrh	r3, [r3, #2]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b05      	cmp	r3, #5
 8007528:	f200 80ac 	bhi.w	8007684 <USBD_GetDescriptor+0x204>
 800752c:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <USBD_GetDescriptor+0xb4>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	0800754d 	.word	0x0800754d
 8007538:	08007581 	.word	0x08007581
 800753c:	080075b5 	.word	0x080075b5
 8007540:	080075e9 	.word	0x080075e9
 8007544:	0800761d 	.word	0x0800761d
 8007548:	08007651 	.word	0x08007651
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00b      	beq.n	8007570 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	7c12      	ldrb	r2, [r2, #16]
 8007564:	f107 0108 	add.w	r1, r7, #8
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800756e:	e091      	b.n	8007694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 facb 	bl	8007b0e <USBD_CtlError>
            err++;
 8007578:	7afb      	ldrb	r3, [r7, #11]
 800757a:	3301      	adds	r3, #1
 800757c:	72fb      	strb	r3, [r7, #11]
          break;
 800757e:	e089      	b.n	8007694 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	7c12      	ldrb	r2, [r2, #16]
 8007598:	f107 0108 	add.w	r1, r7, #8
 800759c:	4610      	mov	r0, r2
 800759e:	4798      	blx	r3
 80075a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a2:	e077      	b.n	8007694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fab1 	bl	8007b0e <USBD_CtlError>
            err++;
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	3301      	adds	r3, #1
 80075b0:	72fb      	strb	r3, [r7, #11]
          break;
 80075b2:	e06f      	b.n	8007694 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	7c12      	ldrb	r2, [r2, #16]
 80075cc:	f107 0108 	add.w	r1, r7, #8
 80075d0:	4610      	mov	r0, r2
 80075d2:	4798      	blx	r3
 80075d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d6:	e05d      	b.n	8007694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa97 	bl	8007b0e <USBD_CtlError>
            err++;
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	3301      	adds	r3, #1
 80075e4:	72fb      	strb	r3, [r7, #11]
          break;
 80075e6:	e055      	b.n	8007694 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	7c12      	ldrb	r2, [r2, #16]
 8007600:	f107 0108 	add.w	r1, r7, #8
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
 8007608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760a:	e043      	b.n	8007694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa7d 	bl	8007b0e <USBD_CtlError>
            err++;
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	3301      	adds	r3, #1
 8007618:	72fb      	strb	r3, [r7, #11]
          break;
 800761a:	e03b      	b.n	8007694 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	7c12      	ldrb	r2, [r2, #16]
 8007634:	f107 0108 	add.w	r1, r7, #8
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
 800763c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800763e:	e029      	b.n	8007694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa63 	bl	8007b0e <USBD_CtlError>
            err++;
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	3301      	adds	r3, #1
 800764c:	72fb      	strb	r3, [r7, #11]
          break;
 800764e:	e021      	b.n	8007694 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	7c12      	ldrb	r2, [r2, #16]
 8007668:	f107 0108 	add.w	r1, r7, #8
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007672:	e00f      	b.n	8007694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fa49 	bl	8007b0e <USBD_CtlError>
            err++;
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	3301      	adds	r3, #1
 8007680:	72fb      	strb	r3, [r7, #11]
          break;
 8007682:	e007      	b.n	8007694 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa41 	bl	8007b0e <USBD_CtlError>
          err++;
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	3301      	adds	r3, #1
 8007690:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007692:	bf00      	nop
      }
      break;
 8007694:	e037      	b.n	8007706 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	7c1b      	ldrb	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a6:	f107 0208 	add.w	r2, r7, #8
 80076aa:	4610      	mov	r0, r2
 80076ac:	4798      	blx	r3
 80076ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076b0:	e029      	b.n	8007706 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fa2a 	bl	8007b0e <USBD_CtlError>
        err++;
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	3301      	adds	r3, #1
 80076be:	72fb      	strb	r3, [r7, #11]
      break;
 80076c0:	e021      	b.n	8007706 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	7c1b      	ldrb	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10d      	bne.n	80076e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	f107 0208 	add.w	r2, r7, #8
 80076d6:	4610      	mov	r0, r2
 80076d8:	4798      	blx	r3
 80076da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	2207      	movs	r2, #7
 80076e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076e4:	e00f      	b.n	8007706 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fa10 	bl	8007b0e <USBD_CtlError>
        err++;
 80076ee:	7afb      	ldrb	r3, [r7, #11]
 80076f0:	3301      	adds	r3, #1
 80076f2:	72fb      	strb	r3, [r7, #11]
      break;
 80076f4:	e007      	b.n	8007706 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fa08 	bl	8007b0e <USBD_CtlError>
      err++;
 80076fe:	7afb      	ldrb	r3, [r7, #11]
 8007700:	3301      	adds	r3, #1
 8007702:	72fb      	strb	r3, [r7, #11]
      break;
 8007704:	bf00      	nop
  }

  if (err != 0U)
 8007706:	7afb      	ldrb	r3, [r7, #11]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d11e      	bne.n	800774a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	88db      	ldrh	r3, [r3, #6]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d016      	beq.n	8007742 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007714:	893b      	ldrh	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00e      	beq.n	8007738 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	88da      	ldrh	r2, [r3, #6]
 800771e:	893b      	ldrh	r3, [r7, #8]
 8007720:	4293      	cmp	r3, r2
 8007722:	bf28      	it	cs
 8007724:	4613      	movcs	r3, r2
 8007726:	b29b      	uxth	r3, r3
 8007728:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800772a:	893b      	ldrh	r3, [r7, #8]
 800772c:	461a      	mov	r2, r3
 800772e:	68f9      	ldr	r1, [r7, #12]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fa5d 	bl	8007bf0 <USBD_CtlSendData>
 8007736:	e009      	b.n	800774c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f9e7 	bl	8007b0e <USBD_CtlError>
 8007740:	e004      	b.n	800774c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa91 	bl	8007c6a <USBD_CtlSendStatus>
 8007748:	e000      	b.n	800774c <USBD_GetDescriptor+0x2cc>
    return;
 800774a:	bf00      	nop
  }
}
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop

08007754 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	889b      	ldrh	r3, [r3, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d131      	bne.n	80077ca <USBD_SetAddress+0x76>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	88db      	ldrh	r3, [r3, #6]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d12d      	bne.n	80077ca <USBD_SetAddress+0x76>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	885b      	ldrh	r3, [r3, #2]
 8007772:	2b7f      	cmp	r3, #127	; 0x7f
 8007774:	d829      	bhi.n	80077ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	885b      	ldrh	r3, [r3, #2]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007780:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b03      	cmp	r3, #3
 800778c:	d104      	bne.n	8007798 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f9bc 	bl	8007b0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007796:	e01d      	b.n	80077d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	7bfa      	ldrb	r2, [r7, #15]
 800779c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fe27 	bl	80083f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa5d 	bl	8007c6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d004      	beq.n	80077c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2202      	movs	r2, #2
 80077ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077be:	e009      	b.n	80077d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c8:	e004      	b.n	80077d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f99e 	bl	8007b0e <USBD_CtlError>
  }
}
 80077d2:	bf00      	nop
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	885b      	ldrh	r3, [r3, #2]
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	4b4e      	ldr	r3, [pc, #312]	; (800792c <USBD_SetConfig+0x150>)
 80077f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077f4:	4b4d      	ldr	r3, [pc, #308]	; (800792c <USBD_SetConfig+0x150>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d905      	bls.n	8007808 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f985 	bl	8007b0e <USBD_CtlError>
    return USBD_FAIL;
 8007804:	2303      	movs	r3, #3
 8007806:	e08c      	b.n	8007922 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d002      	beq.n	800781a <USBD_SetConfig+0x3e>
 8007814:	2b03      	cmp	r3, #3
 8007816:	d029      	beq.n	800786c <USBD_SetConfig+0x90>
 8007818:	e075      	b.n	8007906 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800781a:	4b44      	ldr	r3, [pc, #272]	; (800792c <USBD_SetConfig+0x150>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d020      	beq.n	8007864 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007822:	4b42      	ldr	r3, [pc, #264]	; (800792c <USBD_SetConfig+0x150>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800782c:	4b3f      	ldr	r3, [pc, #252]	; (800792c <USBD_SetConfig+0x150>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fe ffe7 	bl	8006806 <USBD_SetClassConfig>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d008      	beq.n	8007854 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f962 	bl	8007b0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007852:	e065      	b.n	8007920 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fa08 	bl	8007c6a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2203      	movs	r2, #3
 800785e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007862:	e05d      	b.n	8007920 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fa00 	bl	8007c6a <USBD_CtlSendStatus>
      break;
 800786a:	e059      	b.n	8007920 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800786c:	4b2f      	ldr	r3, [pc, #188]	; (800792c <USBD_SetConfig+0x150>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d112      	bne.n	800789a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800787c:	4b2b      	ldr	r3, [pc, #172]	; (800792c <USBD_SetConfig+0x150>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007886:	4b29      	ldr	r3, [pc, #164]	; (800792c <USBD_SetConfig+0x150>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7fe ffd6 	bl	800683e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f9e9 	bl	8007c6a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007898:	e042      	b.n	8007920 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800789a:	4b24      	ldr	r3, [pc, #144]	; (800792c <USBD_SetConfig+0x150>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d02a      	beq.n	80078fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7fe ffc4 	bl	800683e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078b6:	4b1d      	ldr	r3, [pc, #116]	; (800792c <USBD_SetConfig+0x150>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078c0:	4b1a      	ldr	r3, [pc, #104]	; (800792c <USBD_SetConfig+0x150>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fe ff9d 	bl	8006806 <USBD_SetClassConfig>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00f      	beq.n	80078f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f918 	bl	8007b0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fe ffa9 	bl	800683e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078f4:	e014      	b.n	8007920 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f9b7 	bl	8007c6a <USBD_CtlSendStatus>
      break;
 80078fc:	e010      	b.n	8007920 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f9b3 	bl	8007c6a <USBD_CtlSendStatus>
      break;
 8007904:	e00c      	b.n	8007920 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f900 	bl	8007b0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800790e:	4b07      	ldr	r3, [pc, #28]	; (800792c <USBD_SetConfig+0x150>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7fe ff92 	bl	800683e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800791a:	2303      	movs	r3, #3
 800791c:	73fb      	strb	r3, [r7, #15]
      break;
 800791e:	bf00      	nop
  }

  return ret;
 8007920:	7bfb      	ldrb	r3, [r7, #15]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000250 	.word	0x20000250

08007930 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	88db      	ldrh	r3, [r3, #6]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d004      	beq.n	800794c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f8e2 	bl	8007b0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800794a:	e023      	b.n	8007994 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	dc02      	bgt.n	800795e <USBD_GetConfig+0x2e>
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc03      	bgt.n	8007964 <USBD_GetConfig+0x34>
 800795c:	e015      	b.n	800798a <USBD_GetConfig+0x5a>
 800795e:	2b03      	cmp	r3, #3
 8007960:	d00b      	beq.n	800797a <USBD_GetConfig+0x4a>
 8007962:	e012      	b.n	800798a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3308      	adds	r3, #8
 800796e:	2201      	movs	r2, #1
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f93c 	bl	8007bf0 <USBD_CtlSendData>
        break;
 8007978:	e00c      	b.n	8007994 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3304      	adds	r3, #4
 800797e:	2201      	movs	r2, #1
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f934 	bl	8007bf0 <USBD_CtlSendData>
        break;
 8007988:	e004      	b.n	8007994 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f8be 	bl	8007b0e <USBD_CtlError>
        break;
 8007992:	bf00      	nop
}
 8007994:	bf00      	nop
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d81e      	bhi.n	80079f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	88db      	ldrh	r3, [r3, #6]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d004      	beq.n	80079c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f8a5 	bl	8007b0e <USBD_CtlError>
        break;
 80079c4:	e01a      	b.n	80079fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f043 0202 	orr.w	r2, r3, #2
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	330c      	adds	r3, #12
 80079e6:	2202      	movs	r2, #2
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f900 	bl	8007bf0 <USBD_CtlSendData>
      break;
 80079f0:	e004      	b.n	80079fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f88a 	bl	8007b0e <USBD_CtlError>
      break;
 80079fa:	bf00      	nop
  }
}
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	885b      	ldrh	r3, [r3, #2]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d107      	bne.n	8007a26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f923 	bl	8007c6a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a24:	e013      	b.n	8007a4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	885b      	ldrh	r3, [r3, #2]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d10b      	bne.n	8007a46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	889b      	ldrh	r3, [r3, #4]
 8007a32:	0a1b      	lsrs	r3, r3, #8
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f913 	bl	8007c6a <USBD_CtlSendStatus>
}
 8007a44:	e003      	b.n	8007a4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f860 	bl	8007b0e <USBD_CtlError>
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d80b      	bhi.n	8007a86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	885b      	ldrh	r3, [r3, #2]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d10c      	bne.n	8007a90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f8f3 	bl	8007c6a <USBD_CtlSendStatus>
      }
      break;
 8007a84:	e004      	b.n	8007a90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f840 	bl	8007b0e <USBD_CtlError>
      break;
 8007a8e:	e000      	b.n	8007a92 <USBD_ClrFeature+0x3c>
      break;
 8007a90:	bf00      	nop
  }
}
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	781a      	ldrb	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	781a      	ldrb	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff fa41 	bl	8006f4c <SWAPBYTE>
 8007aca:	4603      	mov	r3, r0
 8007acc:	461a      	mov	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f7ff fa34 	bl	8006f4c <SWAPBYTE>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3301      	adds	r3, #1
 8007af0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3301      	adds	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f7ff fa27 	bl	8006f4c <SWAPBYTE>
 8007afe:	4603      	mov	r3, r0
 8007b00:	461a      	mov	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	80da      	strh	r2, [r3, #6]
}
 8007b06:	bf00      	nop
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b18:	2180      	movs	r1, #128	; 0x80
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fc02 	bl	8008324 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b20:	2100      	movs	r1, #0
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fbfe 	bl	8008324 <USBD_LL_StallEP>
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d036      	beq.n	8007bb4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b4a:	6938      	ldr	r0, [r7, #16]
 8007b4c:	f000 f836 	bl	8007bbc <USBD_GetLen>
 8007b50:	4603      	mov	r3, r0
 8007b52:	3301      	adds	r3, #1
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	4413      	add	r3, r2
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7812      	ldrb	r2, [r2, #0]
 8007b68:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	4413      	add	r3, r2
 8007b76:	2203      	movs	r2, #3
 8007b78:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b80:	e013      	b.n	8007baa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	4413      	add	r3, r2
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	7812      	ldrb	r2, [r2, #0]
 8007b8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	3301      	adds	r3, #1
 8007b92:	613b      	str	r3, [r7, #16]
    idx++;
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
 8007b96:	3301      	adds	r3, #1
 8007b98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e7      	bne.n	8007b82 <USBD_GetString+0x52>
 8007bb2:	e000      	b.n	8007bb6 <USBD_GetString+0x86>
    return;
 8007bb4:	bf00      	nop
  }
}
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bcc:	e005      	b.n	8007bda <USBD_GetLen+0x1e>
  {
    len++;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1f5      	bne.n	8007bce <USBD_GetLen+0x12>
  }

  return len;
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	2100      	movs	r1, #0
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 fc0d 	bl	8008436 <USBD_LL_Transmit>

  return USBD_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	2100      	movs	r1, #0
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 fbfc 	bl	8008436 <USBD_LL_Transmit>

  return USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	2100      	movs	r1, #0
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fc0c 	bl	8008478 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2204      	movs	r2, #4
 8007c76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fbd8 	bl	8008436 <USBD_LL_Transmit>

  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2205      	movs	r2, #5
 8007c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fbe6 	bl	8008478 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	490e      	ldr	r1, [pc, #56]	; (8007cf8 <MX_USB_DEVICE_Init+0x40>)
 8007cc0:	480e      	ldr	r0, [pc, #56]	; (8007cfc <MX_USB_DEVICE_Init+0x44>)
 8007cc2:	f7fe fd23 	bl	800670c <USBD_Init>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ccc:	f7f9 f8c0 	bl	8000e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007cd0:	490b      	ldr	r1, [pc, #44]	; (8007d00 <MX_USB_DEVICE_Init+0x48>)
 8007cd2:	480a      	ldr	r0, [pc, #40]	; (8007cfc <MX_USB_DEVICE_Init+0x44>)
 8007cd4:	f7fe fd4a 	bl	800676c <USBD_RegisterClass>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cde:	f7f9 f8b7 	bl	8000e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ce2:	4806      	ldr	r0, [pc, #24]	; (8007cfc <MX_USB_DEVICE_Init+0x44>)
 8007ce4:	f7fe fd78 	bl	80067d8 <USBD_Start>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007cee:	f7f9 f8af 	bl	8000e50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cf2:	bf00      	nop
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	200000d4 	.word	0x200000d4
 8007cfc:	20000254 	.word	0x20000254
 8007d00:	20000014 	.word	0x20000014

08007d04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	6039      	str	r1, [r7, #0]
 8007d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2212      	movs	r2, #18
 8007d14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d16:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	200000f0 	.word	0x200000f0

08007d28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	6039      	str	r1, [r7, #0]
 8007d32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2204      	movs	r2, #4
 8007d38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d3a:	4b03      	ldr	r3, [pc, #12]	; (8007d48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	20000104 	.word	0x20000104

08007d4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	6039      	str	r1, [r7, #0]
 8007d56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d105      	bne.n	8007d6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	4907      	ldr	r1, [pc, #28]	; (8007d80 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d62:	4808      	ldr	r0, [pc, #32]	; (8007d84 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d64:	f7ff fee4 	bl	8007b30 <USBD_GetString>
 8007d68:	e004      	b.n	8007d74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	4904      	ldr	r1, [pc, #16]	; (8007d80 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d6e:	4805      	ldr	r0, [pc, #20]	; (8007d84 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d70:	f7ff fede 	bl	8007b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d74:	4b02      	ldr	r3, [pc, #8]	; (8007d80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000530 	.word	0x20000530
 8007d84:	080085b4 	.word	0x080085b4

08007d88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	6039      	str	r1, [r7, #0]
 8007d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	4904      	ldr	r1, [pc, #16]	; (8007da8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d98:	4804      	ldr	r0, [pc, #16]	; (8007dac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d9a:	f7ff fec9 	bl	8007b30 <USBD_GetString>
  return USBD_StrDesc;
 8007d9e:	4b02      	ldr	r3, [pc, #8]	; (8007da8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000530 	.word	0x20000530
 8007dac:	080085c8 	.word	0x080085c8

08007db0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	6039      	str	r1, [r7, #0]
 8007dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	221a      	movs	r2, #26
 8007dc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007dc2:	f000 f843 	bl	8007e4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dc6:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000108 	.word	0x20000108

08007dd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	6039      	str	r1, [r7, #0]
 8007dde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007de0:	79fb      	ldrb	r3, [r7, #7]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d105      	bne.n	8007df2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	4907      	ldr	r1, [pc, #28]	; (8007e08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dea:	4808      	ldr	r0, [pc, #32]	; (8007e0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dec:	f7ff fea0 	bl	8007b30 <USBD_GetString>
 8007df0:	e004      	b.n	8007dfc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	4904      	ldr	r1, [pc, #16]	; (8007e08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007df6:	4805      	ldr	r0, [pc, #20]	; (8007e0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007df8:	f7ff fe9a 	bl	8007b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dfc:	4b02      	ldr	r3, [pc, #8]	; (8007e08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000530 	.word	0x20000530
 8007e0c:	080085dc 	.word	0x080085dc

08007e10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	6039      	str	r1, [r7, #0]
 8007e1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e1c:	79fb      	ldrb	r3, [r7, #7]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d105      	bne.n	8007e2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	4907      	ldr	r1, [pc, #28]	; (8007e44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e26:	4808      	ldr	r0, [pc, #32]	; (8007e48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e28:	f7ff fe82 	bl	8007b30 <USBD_GetString>
 8007e2c:	e004      	b.n	8007e38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	4904      	ldr	r1, [pc, #16]	; (8007e44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e32:	4805      	ldr	r0, [pc, #20]	; (8007e48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e34:	f7ff fe7c 	bl	8007b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e38:	4b02      	ldr	r3, [pc, #8]	; (8007e44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20000530 	.word	0x20000530
 8007e48:	080085e8 	.word	0x080085e8

08007e4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e52:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <Get_SerialNum+0x44>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e58:	4b0e      	ldr	r3, [pc, #56]	; (8007e94 <Get_SerialNum+0x48>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e5e:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <Get_SerialNum+0x4c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4413      	add	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d009      	beq.n	8007e86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e72:	2208      	movs	r2, #8
 8007e74:	4909      	ldr	r1, [pc, #36]	; (8007e9c <Get_SerialNum+0x50>)
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 f814 	bl	8007ea4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e7c:	2204      	movs	r2, #4
 8007e7e:	4908      	ldr	r1, [pc, #32]	; (8007ea0 <Get_SerialNum+0x54>)
 8007e80:	68b8      	ldr	r0, [r7, #8]
 8007e82:	f000 f80f 	bl	8007ea4 <IntToUnicode>
  }
}
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	1fff7a10 	.word	0x1fff7a10
 8007e94:	1fff7a14 	.word	0x1fff7a14
 8007e98:	1fff7a18 	.word	0x1fff7a18
 8007e9c:	2000010a 	.word	0x2000010a
 8007ea0:	2000011a 	.word	0x2000011a

08007ea4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75fb      	strb	r3, [r7, #23]
 8007eba:	e027      	b.n	8007f0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	0f1b      	lsrs	r3, r3, #28
 8007ec0:	2b09      	cmp	r3, #9
 8007ec2:	d80b      	bhi.n	8007edc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	0f1b      	lsrs	r3, r3, #28
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	4619      	mov	r1, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3230      	adds	r2, #48	; 0x30
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	701a      	strb	r2, [r3, #0]
 8007eda:	e00a      	b.n	8007ef2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	0f1b      	lsrs	r3, r3, #28
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	440b      	add	r3, r1
 8007eec:	3237      	adds	r2, #55	; 0x37
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	3301      	adds	r3, #1
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	4413      	add	r3, r2
 8007f02:	2200      	movs	r2, #0
 8007f04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	75fb      	strb	r3, [r7, #23]
 8007f0c:	7dfa      	ldrb	r2, [r7, #23]
 8007f0e:	79fb      	ldrb	r3, [r7, #7]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d3d3      	bcc.n	8007ebc <IntToUnicode+0x18>
  }
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
	...

08007f24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08a      	sub	sp, #40	; 0x28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f2c:	f107 0314 	add.w	r3, r7, #20
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	605a      	str	r2, [r3, #4]
 8007f36:	609a      	str	r2, [r3, #8]
 8007f38:	60da      	str	r2, [r3, #12]
 8007f3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f44:	d147      	bne.n	8007fd6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
 8007f4a:	4b25      	ldr	r3, [pc, #148]	; (8007fe0 <HAL_PCD_MspInit+0xbc>)
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	4a24      	ldr	r2, [pc, #144]	; (8007fe0 <HAL_PCD_MspInit+0xbc>)
 8007f50:	f043 0301 	orr.w	r3, r3, #1
 8007f54:	6313      	str	r3, [r2, #48]	; 0x30
 8007f56:	4b22      	ldr	r3, [pc, #136]	; (8007fe0 <HAL_PCD_MspInit+0xbc>)
 8007f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	613b      	str	r3, [r7, #16]
 8007f60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f70:	f107 0314 	add.w	r3, r7, #20
 8007f74:	4619      	mov	r1, r3
 8007f76:	481b      	ldr	r0, [pc, #108]	; (8007fe4 <HAL_PCD_MspInit+0xc0>)
 8007f78:	f7f9 fa36 	bl	80013e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007f7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f82:	2302      	movs	r3, #2
 8007f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f8e:	230a      	movs	r3, #10
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f92:	f107 0314 	add.w	r3, r7, #20
 8007f96:	4619      	mov	r1, r3
 8007f98:	4812      	ldr	r0, [pc, #72]	; (8007fe4 <HAL_PCD_MspInit+0xc0>)
 8007f9a:	f7f9 fa25 	bl	80013e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f9e:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <HAL_PCD_MspInit+0xbc>)
 8007fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa2:	4a0f      	ldr	r2, [pc, #60]	; (8007fe0 <HAL_PCD_MspInit+0xbc>)
 8007fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa8:	6353      	str	r3, [r2, #52]	; 0x34
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	4b0c      	ldr	r3, [pc, #48]	; (8007fe0 <HAL_PCD_MspInit+0xbc>)
 8007fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb2:	4a0b      	ldr	r2, [pc, #44]	; (8007fe0 <HAL_PCD_MspInit+0xbc>)
 8007fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8007fba:	4b09      	ldr	r3, [pc, #36]	; (8007fe0 <HAL_PCD_MspInit+0xbc>)
 8007fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2100      	movs	r1, #0
 8007fca:	2043      	movs	r0, #67	; 0x43
 8007fcc:	f7f9 f9d5 	bl	800137a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007fd0:	2043      	movs	r0, #67	; 0x43
 8007fd2:	f7f9 f9ee 	bl	80013b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007fd6:	bf00      	nop
 8007fd8:	3728      	adds	r7, #40	; 0x28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	40023800 	.word	0x40023800
 8007fe4:	40020000 	.word	0x40020000

08007fe8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	4610      	mov	r0, r2
 8008000:	f7fe fc37 	bl	8006872 <USBD_LL_SetupStage>
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800801e:	78fa      	ldrb	r2, [r7, #3]
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	4613      	mov	r3, r2
 8008024:	00db      	lsls	r3, r3, #3
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	440b      	add	r3, r1
 800802c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	78fb      	ldrb	r3, [r7, #3]
 8008034:	4619      	mov	r1, r3
 8008036:	f7fe fc71 	bl	800691c <USBD_LL_DataOutStage>
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	460b      	mov	r3, r1
 800804c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	4613      	mov	r3, r2
 800805a:	00db      	lsls	r3, r3, #3
 800805c:	4413      	add	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	440b      	add	r3, r1
 8008062:	334c      	adds	r3, #76	; 0x4c
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	78fb      	ldrb	r3, [r7, #3]
 8008068:	4619      	mov	r1, r3
 800806a:	f7fe fd0a 	bl	8006a82 <USBD_LL_DataInStage>
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe fe3e 	bl	8006d06 <USBD_LL_SOF>
}
 800808a:	bf00      	nop
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800809a:	2301      	movs	r3, #1
 800809c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d102      	bne.n	80080ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]
 80080aa:	e008      	b.n	80080be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d102      	bne.n	80080ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80080b4:	2301      	movs	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
 80080b8:	e001      	b.n	80080be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80080ba:	f7f8 fec9 	bl	8000e50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080c4:	7bfa      	ldrb	r2, [r7, #15]
 80080c6:	4611      	mov	r1, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fe fdde 	bl	8006c8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe fd86 	bl	8006be6 <USBD_LL_Reset>
}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe fdd9 	bl	8006caa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6812      	ldr	r2, [r2, #0]
 8008106:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800810a:	f043 0301 	orr.w	r3, r3, #1
 800810e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008118:	4b04      	ldr	r3, [pc, #16]	; (800812c <HAL_PCD_SuspendCallback+0x48>)
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	4a03      	ldr	r2, [pc, #12]	; (800812c <HAL_PCD_SuspendCallback+0x48>)
 800811e:	f043 0306 	orr.w	r3, r3, #6
 8008122:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	e000ed00 	.word	0xe000ed00

08008130 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe fdc9 	bl	8006cd6 <USBD_LL_Resume>
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800815e:	78fa      	ldrb	r2, [r7, #3]
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fe21 	bl	8006daa <USBD_LL_IsoOUTIncomplete>
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fddd 	bl	8006d46 <USBD_LL_IsoINIncomplete>
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe fe33 	bl	8006e0e <USBD_LL_DevConnected>
}
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe fe30 	bl	8006e24 <USBD_LL_DevDisconnected>
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d13c      	bne.n	8008256 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80081dc:	4a20      	ldr	r2, [pc, #128]	; (8008260 <USBD_LL_Init+0x94>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a1e      	ldr	r2, [pc, #120]	; (8008260 <USBD_LL_Init+0x94>)
 80081e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081ec:	4b1c      	ldr	r3, [pc, #112]	; (8008260 <USBD_LL_Init+0x94>)
 80081ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80081f4:	4b1a      	ldr	r3, [pc, #104]	; (8008260 <USBD_LL_Init+0x94>)
 80081f6:	2204      	movs	r2, #4
 80081f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80081fa:	4b19      	ldr	r3, [pc, #100]	; (8008260 <USBD_LL_Init+0x94>)
 80081fc:	2202      	movs	r2, #2
 80081fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008200:	4b17      	ldr	r3, [pc, #92]	; (8008260 <USBD_LL_Init+0x94>)
 8008202:	2200      	movs	r2, #0
 8008204:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008206:	4b16      	ldr	r3, [pc, #88]	; (8008260 <USBD_LL_Init+0x94>)
 8008208:	2202      	movs	r2, #2
 800820a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800820c:	4b14      	ldr	r3, [pc, #80]	; (8008260 <USBD_LL_Init+0x94>)
 800820e:	2200      	movs	r2, #0
 8008210:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008212:	4b13      	ldr	r3, [pc, #76]	; (8008260 <USBD_LL_Init+0x94>)
 8008214:	2200      	movs	r2, #0
 8008216:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008218:	4b11      	ldr	r3, [pc, #68]	; (8008260 <USBD_LL_Init+0x94>)
 800821a:	2200      	movs	r2, #0
 800821c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800821e:	4b10      	ldr	r3, [pc, #64]	; (8008260 <USBD_LL_Init+0x94>)
 8008220:	2200      	movs	r2, #0
 8008222:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008224:	4b0e      	ldr	r3, [pc, #56]	; (8008260 <USBD_LL_Init+0x94>)
 8008226:	2200      	movs	r2, #0
 8008228:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800822a:	480d      	ldr	r0, [pc, #52]	; (8008260 <USBD_LL_Init+0x94>)
 800822c:	f7fa f8a6 	bl	800237c <HAL_PCD_Init>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008236:	f7f8 fe0b 	bl	8000e50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800823a:	2180      	movs	r1, #128	; 0x80
 800823c:	4808      	ldr	r0, [pc, #32]	; (8008260 <USBD_LL_Init+0x94>)
 800823e:	f7fb fae6 	bl	800380e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008242:	2240      	movs	r2, #64	; 0x40
 8008244:	2100      	movs	r1, #0
 8008246:	4806      	ldr	r0, [pc, #24]	; (8008260 <USBD_LL_Init+0x94>)
 8008248:	f7fb fa9a 	bl	8003780 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800824c:	2280      	movs	r2, #128	; 0x80
 800824e:	2101      	movs	r1, #1
 8008250:	4803      	ldr	r0, [pc, #12]	; (8008260 <USBD_LL_Init+0x94>)
 8008252:	f7fb fa95 	bl	8003780 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	20000730 	.word	0x20000730

08008264 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800827a:	4618      	mov	r0, r3
 800827c:	f7fa f99b 	bl	80025b6 <HAL_PCD_Start>
 8008280:	4603      	mov	r3, r0
 8008282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f930 	bl	80084ec <USBD_Get_USB_Status>
 800828c:	4603      	mov	r3, r0
 800828e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008290:	7bbb      	ldrb	r3, [r7, #14]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	4608      	mov	r0, r1
 80082a4:	4611      	mov	r1, r2
 80082a6:	461a      	mov	r2, r3
 80082a8:	4603      	mov	r3, r0
 80082aa:	70fb      	strb	r3, [r7, #3]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70bb      	strb	r3, [r7, #2]
 80082b0:	4613      	mov	r3, r2
 80082b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082c2:	78bb      	ldrb	r3, [r7, #2]
 80082c4:	883a      	ldrh	r2, [r7, #0]
 80082c6:	78f9      	ldrb	r1, [r7, #3]
 80082c8:	f7fa fe6c 	bl	8002fa4 <HAL_PCD_EP_Open>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 f90a 	bl	80084ec <USBD_Get_USB_Status>
 80082d8:	4603      	mov	r3, r0
 80082da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008300:	78fa      	ldrb	r2, [r7, #3]
 8008302:	4611      	mov	r1, r2
 8008304:	4618      	mov	r0, r3
 8008306:	f7fa feb5 	bl	8003074 <HAL_PCD_EP_Close>
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	4618      	mov	r0, r3
 8008312:	f000 f8eb 	bl	80084ec <USBD_Get_USB_Status>
 8008316:	4603      	mov	r3, r0
 8008318:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800831a:	7bbb      	ldrb	r3, [r7, #14]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800833e:	78fa      	ldrb	r2, [r7, #3]
 8008340:	4611      	mov	r1, r2
 8008342:	4618      	mov	r0, r3
 8008344:	f7fa ff75 	bl	8003232 <HAL_PCD_EP_SetStall>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	4618      	mov	r0, r3
 8008350:	f000 f8cc 	bl	80084ec <USBD_Get_USB_Status>
 8008354:	4603      	mov	r3, r0
 8008356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008358:	7bbb      	ldrb	r3, [r7, #14]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	460b      	mov	r3, r1
 800836c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	4611      	mov	r1, r2
 8008380:	4618      	mov	r0, r3
 8008382:	f7fa ffba 	bl	80032fa <HAL_PCD_EP_ClrStall>
 8008386:	4603      	mov	r3, r0
 8008388:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	4618      	mov	r0, r3
 800838e:	f000 f8ad 	bl	80084ec <USBD_Get_USB_Status>
 8008392:	4603      	mov	r3, r0
 8008394:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008396:	7bbb      	ldrb	r3, [r7, #14]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	da0b      	bge.n	80083d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083bc:	78fb      	ldrb	r3, [r7, #3]
 80083be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083c2:	68f9      	ldr	r1, [r7, #12]
 80083c4:	4613      	mov	r3, r2
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	440b      	add	r3, r1
 80083ce:	333e      	adds	r3, #62	; 0x3e
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	e00b      	b.n	80083ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083da:	68f9      	ldr	r1, [r7, #12]
 80083dc:	4613      	mov	r3, r2
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80083ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008412:	78fa      	ldrb	r2, [r7, #3]
 8008414:	4611      	mov	r1, r2
 8008416:	4618      	mov	r0, r3
 8008418:	f7fa fd9f 	bl	8002f5a <HAL_PCD_SetAddress>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 f862 	bl	80084ec <USBD_Get_USB_Status>
 8008428:	4603      	mov	r3, r0
 800842a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800842c:	7bbb      	ldrb	r3, [r7, #14]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b086      	sub	sp, #24
 800843a:	af00      	add	r7, sp, #0
 800843c:	60f8      	str	r0, [r7, #12]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
 8008442:	460b      	mov	r3, r1
 8008444:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008454:	7af9      	ldrb	r1, [r7, #11]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	f7fa fea0 	bl	800319e <HAL_PCD_EP_Transmit>
 800845e:	4603      	mov	r3, r0
 8008460:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	4618      	mov	r0, r3
 8008466:	f000 f841 	bl	80084ec <USBD_Get_USB_Status>
 800846a:	4603      	mov	r3, r0
 800846c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800846e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	607a      	str	r2, [r7, #4]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	460b      	mov	r3, r1
 8008486:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008496:	7af9      	ldrb	r1, [r7, #11]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	f7fa fe34 	bl	8003108 <HAL_PCD_EP_Receive>
 80084a0:	4603      	mov	r3, r0
 80084a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 f820 	bl	80084ec <USBD_Get_USB_Status>
 80084ac:	4603      	mov	r3, r0
 80084ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084c4:	4b03      	ldr	r3, [pc, #12]	; (80084d4 <USBD_static_malloc+0x18>)
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	20000c3c 	.word	0x20000c3c

080084d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]

}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d817      	bhi.n	8008530 <USBD_Get_USB_Status+0x44>
 8008500:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <USBD_Get_USB_Status+0x1c>)
 8008502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008506:	bf00      	nop
 8008508:	08008519 	.word	0x08008519
 800850c:	0800851f 	.word	0x0800851f
 8008510:	08008525 	.word	0x08008525
 8008514:	0800852b 	.word	0x0800852b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
    break;
 800851c:	e00b      	b.n	8008536 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800851e:	2303      	movs	r3, #3
 8008520:	73fb      	strb	r3, [r7, #15]
    break;
 8008522:	e008      	b.n	8008536 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008524:	2301      	movs	r3, #1
 8008526:	73fb      	strb	r3, [r7, #15]
    break;
 8008528:	e005      	b.n	8008536 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800852a:	2303      	movs	r3, #3
 800852c:	73fb      	strb	r3, [r7, #15]
    break;
 800852e:	e002      	b.n	8008536 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008530:	2303      	movs	r3, #3
 8008532:	73fb      	strb	r3, [r7, #15]
    break;
 8008534:	bf00      	nop
  }
  return usb_status;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <__libc_init_array>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	4d0d      	ldr	r5, [pc, #52]	; (800857c <__libc_init_array+0x38>)
 8008548:	4c0d      	ldr	r4, [pc, #52]	; (8008580 <__libc_init_array+0x3c>)
 800854a:	1b64      	subs	r4, r4, r5
 800854c:	10a4      	asrs	r4, r4, #2
 800854e:	2600      	movs	r6, #0
 8008550:	42a6      	cmp	r6, r4
 8008552:	d109      	bne.n	8008568 <__libc_init_array+0x24>
 8008554:	4d0b      	ldr	r5, [pc, #44]	; (8008584 <__libc_init_array+0x40>)
 8008556:	4c0c      	ldr	r4, [pc, #48]	; (8008588 <__libc_init_array+0x44>)
 8008558:	f000 f820 	bl	800859c <_init>
 800855c:	1b64      	subs	r4, r4, r5
 800855e:	10a4      	asrs	r4, r4, #2
 8008560:	2600      	movs	r6, #0
 8008562:	42a6      	cmp	r6, r4
 8008564:	d105      	bne.n	8008572 <__libc_init_array+0x2e>
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	f855 3b04 	ldr.w	r3, [r5], #4
 800856c:	4798      	blx	r3
 800856e:	3601      	adds	r6, #1
 8008570:	e7ee      	b.n	8008550 <__libc_init_array+0xc>
 8008572:	f855 3b04 	ldr.w	r3, [r5], #4
 8008576:	4798      	blx	r3
 8008578:	3601      	adds	r6, #1
 800857a:	e7f2      	b.n	8008562 <__libc_init_array+0x1e>
 800857c:	08008618 	.word	0x08008618
 8008580:	08008618 	.word	0x08008618
 8008584:	08008618 	.word	0x08008618
 8008588:	0800861c 	.word	0x0800861c

0800858c <memset>:
 800858c:	4402      	add	r2, r0
 800858e:	4603      	mov	r3, r0
 8008590:	4293      	cmp	r3, r2
 8008592:	d100      	bne.n	8008596 <memset+0xa>
 8008594:	4770      	bx	lr
 8008596:	f803 1b01 	strb.w	r1, [r3], #1
 800859a:	e7f9      	b.n	8008590 <memset+0x4>

0800859c <_init>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	bf00      	nop
 80085a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a2:	bc08      	pop	{r3}
 80085a4:	469e      	mov	lr, r3
 80085a6:	4770      	bx	lr

080085a8 <_fini>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	bf00      	nop
 80085ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ae:	bc08      	pop	{r3}
 80085b0:	469e      	mov	lr, r3
 80085b2:	4770      	bx	lr
